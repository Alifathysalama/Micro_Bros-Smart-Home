
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000354c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  0000354c  000035e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800202  00800202  00003782  2**0
                  ALLOC
  3 .stab         00002940  00000000  00000000  00003784  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e5c  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000096bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000aa33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bc0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 11 	call	0x23dc	; 0x23dc <main>
      8a:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ee       	ldi	r22, 0xE1	; 225
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e7 51       	subi	r30, 0x17	; 23
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <buzzer_initialize>:
 */

#include "Buzzer.h"

void buzzer_initialize()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<4);
     e00:	a1 e3       	ldi	r26, 0x31	; 49
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e1 e3       	ldi	r30, 0x31	; 49
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 61       	ori	r24, 0x10	; 16
     e0c:	8c 93       	st	X, r24
	PORTD &= ~(1<<4);
     e0e:	a2 e3       	ldi	r26, 0x32	; 50
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e2 e3       	ldi	r30, 0x32	; 50
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8f 7e       	andi	r24, 0xEF	; 239
     e1a:	8c 93       	st	X, r24
}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <buzzer_turn_on>:

//function to turn on buzzer for a certain time
//time in ms
void buzzer_turn_on(double time)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	62 97       	sbiw	r28, 0x12	; 18
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	6f 87       	std	Y+15, r22	; 0x0f
     e38:	78 8b       	std	Y+16, r23	; 0x10
     e3a:	89 8b       	std	Y+17, r24	; 0x11
     e3c:	9a 8b       	std	Y+18, r25	; 0x12
	PORTD |= (1<<4);
     e3e:	a2 e3       	ldi	r26, 0x32	; 50
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e2 e3       	ldi	r30, 0x32	; 50
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	80 61       	ori	r24, 0x10	; 16
     e4a:	8c 93       	st	X, r24
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	98 89       	ldd	r25, Y+16	; 0x10
     e50:	a9 89       	ldd	r26, Y+17	; 0x11
     e52:	ba 89       	ldd	r27, Y+18	; 0x12
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	53 e4       	ldi	r21, 0x43	; 67
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <buzzer_turn_on+0x7c>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <buzzer_turn_on+0xfa>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <buzzer_turn_on+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <buzzer_turn_on+0xdc>
     ee0:	89 e1       	ldi	r24, 0x19	; 25
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <buzzer_turn_on+0xca>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <buzzer_turn_on+0xbe>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <buzzer_turn_on+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <buzzer_turn_on+0x106>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(time);
	PORTD &= ~(1<<4);
     f30:	a2 e3       	ldi	r26, 0x32	; 50
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e2 e3       	ldi	r30, 0x32	; 50
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	8c 93       	st	X, r24
}
     f3e:	62 96       	adiw	r28, 0x12	; 18
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <Get_Key_pressed>:
 */

#include "KeyPad.h"

uint8_t Get_Key_pressed(void) // the main function to get the character pressed on the keypad.
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	6d 97       	sbiw	r28, 0x1d	; 29
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
	KEY_DDR = 0xF0;           /* set port direction as input-output */
     f64:	e4 e3       	ldi	r30, 0x34	; 52
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 ef       	ldi	r24, 0xF0	; 240
     f6a:	80 83       	st	Z, r24
	while (1)
	{
		KEY_PRT = 0xFF;
     f6c:	e5 e3       	ldi	r30, 0x35	; 53
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	80 83       	st	Z, r24
		do
		{
			KEY_PRT &= 0x0F;      		/* mask PORT for column read only */
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 70       	andi	r24, 0x0F	; 15
     f80:	8c 93       	st	X, r24
			asm("NOP");					//is an assembly instruction that does nothing
     f82:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); 	/* read status of column */
     f84:	e3 e3       	ldi	r30, 0x33	; 51
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 70       	andi	r24, 0x0F	; 15
     f8c:	80 93 02 02 	sts	0x0202, r24
		} while (colloc != 0x0F);
     f90:	80 91 02 02 	lds	r24, 0x0202
     f94:	8f 30       	cpi	r24, 0x0F	; 15
     f96:	71 f7       	brne	.-36     	; 0xf74 <Get_Key_pressed+0x24>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 ea       	ldi	r26, 0xA0	; 160
     f9e:	b1 e4       	ldi	r27, 0x41	; 65
     fa0:	89 8f       	std	Y+25, r24	; 0x19
     fa2:	9a 8f       	std	Y+26, r25	; 0x1a
     fa4:	ab 8f       	std	Y+27, r26	; 0x1b
     fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	4a e7       	ldi	r20, 0x7A	; 122
     fb6:	53 e4       	ldi	r21, 0x43	; 67
     fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fc8:	6d 89       	ldd	r22, Y+21	; 0x15
     fca:	7e 89       	ldd	r23, Y+22	; 0x16
     fcc:	8f 89       	ldd	r24, Y+23	; 0x17
     fce:	98 8d       	ldd	r25, Y+24	; 0x18
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fdc:	88 23       	and	r24, r24
     fde:	2c f4       	brge	.+10     	; 0xfea <Get_Key_pressed+0x9a>
		__ticks = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 8b       	std	Y+20, r25	; 0x14
     fe6:	8b 8b       	std	Y+19, r24	; 0x13
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <Get_Key_pressed+0x118>
	else if (__tmp > 65535)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	3f ef       	ldi	r19, 0xFF	; 255
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	57 e4       	ldi	r21, 0x47	; 71
     ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	4c f5       	brge	.+82     	; 0x1054 <Get_Key_pressed+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1002:	69 8d       	ldd	r22, Y+25	; 0x19
    1004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 8b       	std	Y+20, r25	; 0x14
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	0f c0       	rjmp	.+30     	; 0x104a <Get_Key_pressed+0xfa>
    102c:	89 e1       	ldi	r24, 0x19	; 25
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9a 8b       	std	Y+18, r25	; 0x12
    1032:	89 8b       	std	Y+17, r24	; 0x11
    1034:	89 89       	ldd	r24, Y+17	; 0x11
    1036:	9a 89       	ldd	r25, Y+18	; 0x12
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	f1 f7       	brne	.-4      	; 0x1038 <Get_Key_pressed+0xe8>
    103c:	9a 8b       	std	Y+18, r25	; 0x12
    103e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1040:	8b 89       	ldd	r24, Y+19	; 0x13
    1042:	9c 89       	ldd	r25, Y+20	; 0x14
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 8b       	std	Y+20, r25	; 0x14
    1048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	9c 89       	ldd	r25, Y+20	; 0x14
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f7       	brne	.-38     	; 0x102c <Get_Key_pressed+0xdc>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <Get_Key_pressed+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1054:	6d 89       	ldd	r22, Y+21	; 0x15
    1056:	7e 89       	ldd	r23, Y+22	; 0x16
    1058:	8f 89       	ldd	r24, Y+23	; 0x17
    105a:	98 8d       	ldd	r25, Y+24	; 0x18
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	98 8b       	std	Y+16, r25	; 0x10
    106e:	8f 87       	std	Y+15, r24	; 0x0f
    1070:	8f 85       	ldd	r24, Y+15	; 0x0f
    1072:	98 89       	ldd	r25, Y+16	; 0x10
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <Get_Key_pressed+0x124>
    1078:	98 8b       	std	Y+16, r25	; 0x10
    107a:	8f 87       	std	Y+15, r24	; 0x0f
		do
		{
			do
			{
				_delay_ms(20);             	/* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); 	/* read status of column */
    107c:	e3 e3       	ldi	r30, 0x33	; 51
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8f 70       	andi	r24, 0x0F	; 15
    1084:	80 93 02 02 	sts	0x0202, r24
			} while (colloc == 0x0F);       /* check for any key press */
    1088:	80 91 02 02 	lds	r24, 0x0202
    108c:	8f 30       	cpi	r24, 0x0F	; 15
    108e:	09 f4       	brne	.+2      	; 0x1092 <Get_Key_pressed+0x142>
    1090:	83 cf       	rjmp	.-250    	; 0xf98 <Get_Key_pressed+0x48>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e2       	ldi	r26, 0x20	; 32
    1098:	b2 e4       	ldi	r27, 0x42	; 66
    109a:	8b 87       	std	Y+11, r24	; 0x0b
    109c:	9c 87       	std	Y+12, r25	; 0x0c
    109e:	ad 87       	std	Y+13, r26	; 0x0d
    10a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4a e7       	ldi	r20, 0x7A	; 122
    10b0:	53 e4       	ldi	r21, 0x43	; 67
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	8f 83       	std	Y+7, r24	; 0x07
    10bc:	98 87       	std	Y+8, r25	; 0x08
    10be:	a9 87       	std	Y+9, r26	; 0x09
    10c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c2:	6f 81       	ldd	r22, Y+7	; 0x07
    10c4:	78 85       	ldd	r23, Y+8	; 0x08
    10c6:	89 85       	ldd	r24, Y+9	; 0x09
    10c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10d6:	88 23       	and	r24, r24
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <Get_Key_pressed+0x194>
		__ticks = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <Get_Key_pressed+0x212>
	else if (__tmp > 65535)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10f8:	18 16       	cp	r1, r24
    10fa:	4c f5       	brge	.+82     	; 0x114e <Get_Key_pressed+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1100:	8d 85       	ldd	r24, Y+13	; 0x0d
    1102:	9e 85       	ldd	r25, Y+14	; 0x0e
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9e 83       	std	Y+6, r25	; 0x06
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <Get_Key_pressed+0x1f4>
    1126:	89 e1       	ldi	r24, 0x19	; 25
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <Get_Key_pressed+0x1e2>
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f7       	brne	.-38     	; 0x1126 <Get_Key_pressed+0x1d6>
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <Get_Key_pressed+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	9e 83       	std	Y+6, r25	; 0x06
    1160:	8d 83       	std	Y+5, r24	; 0x05
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	9a 83       	std	Y+2, r25	; 0x02
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <Get_Key_pressed+0x21e>
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(40);	            	/* 20ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	80 93 02 02 	sts	0x0202, r24
		} while (colloc == 0x0F);
    1182:	80 91 02 02 	lds	r24, 0x0202
    1186:	8f 30       	cpi	r24, 0x0F	; 15
    1188:	09 f4       	brne	.+2      	; 0x118c <Get_Key_pressed+0x23c>
    118a:	06 cf       	rjmp	.-500    	; 0xf98 <Get_Key_pressed+0x48>

		/* now check for rows */
		KEY_PRT = 0xEF;            			/* check for pressed key in 1st row */
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8f ee       	ldi	r24, 0xEF	; 239
    1192:	80 83       	st	Z, r24
		asm("NOP");							//is an assembly instruction that does nothing
    1194:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
    1196:	e3 e3       	ldi	r30, 0x33	; 51
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 70       	andi	r24, 0x0F	; 15
    119e:	80 93 02 02 	sts	0x0202, r24
		if (colloc != 0x0F)
    11a2:	80 91 02 02 	lds	r24, 0x0202
    11a6:	8f 30       	cpi	r24, 0x0F	; 15
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <Get_Key_pressed+0x260>
		{
			rowloc = 0;
    11aa:	10 92 03 02 	sts	0x0203, r1
    11ae:	39 c0       	rjmp	.+114    	; 0x1222 <Get_Key_pressed+0x2d2>
			break;
		}

		KEY_PRT = 0xDF;						/* check for pressed key in 2nd row */
    11b0:	e5 e3       	ldi	r30, 0x35	; 53
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8f ed       	ldi	r24, 0xDF	; 223
    11b6:	80 83       	st	Z, r24
		asm("NOP");							//is an assembly instruction that does nothing
    11b8:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 70       	andi	r24, 0x0F	; 15
    11c2:	80 93 02 02 	sts	0x0202, r24
		if (colloc != 0x0F)
    11c6:	80 91 02 02 	lds	r24, 0x0202
    11ca:	8f 30       	cpi	r24, 0x0F	; 15
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <Get_Key_pressed+0x286>
		{
			rowloc = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 03 02 	sts	0x0203, r24
    11d4:	26 c0       	rjmp	.+76     	; 0x1222 <Get_Key_pressed+0x2d2>
			break;
		}

		KEY_PRT = 0xBF;						/* check for pressed key in 3rd row */
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8f eb       	ldi	r24, 0xBF	; 191
    11dc:	80 83       	st	Z, r24
		asm("NOP");							//is an assembly instruction that does nothing
    11de:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
    11e0:	e3 e3       	ldi	r30, 0x33	; 51
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	80 93 02 02 	sts	0x0202, r24
		if (colloc != 0x0F)
    11ec:	80 91 02 02 	lds	r24, 0x0202
    11f0:	8f 30       	cpi	r24, 0x0F	; 15
    11f2:	21 f0       	breq	.+8      	; 0x11fc <Get_Key_pressed+0x2ac>
		{
			rowloc = 2;
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	80 93 03 02 	sts	0x0203, r24
    11fa:	13 c0       	rjmp	.+38     	; 0x1222 <Get_Key_pressed+0x2d2>
			break;
		}

		KEY_PRT = 0x7F;						/* check for pressed key in 4th row */
    11fc:	e5 e3       	ldi	r30, 0x35	; 53
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8f e7       	ldi	r24, 0x7F	; 127
    1202:	80 83       	st	Z, r24
		asm("NOP");							//is an assembly instruction that does nothing
    1204:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
    1206:	e3 e3       	ldi	r30, 0x33	; 51
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	80 93 02 02 	sts	0x0202, r24
		if (colloc != 0x0F)
    1212:	80 91 02 02 	lds	r24, 0x0202
    1216:	8f 30       	cpi	r24, 0x0F	; 15
    1218:	09 f4       	brne	.+2      	; 0x121c <Get_Key_pressed+0x2cc>
    121a:	a8 ce       	rjmp	.-688    	; 0xf6c <Get_Key_pressed+0x1c>
		{
			rowloc = 3;
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	80 93 03 02 	sts	0x0203, r24
			break;
		}
	}

	if (colloc == 0x0E)
    1222:	80 91 02 02 	lds	r24, 0x0202
    1226:	8e 30       	cpi	r24, 0x0E	; 14
    1228:	71 f4       	brne	.+28     	; 0x1246 <Get_Key_pressed+0x2f6>
		return(keypad[rowloc][0]);
    122a:	80 91 03 02 	lds	r24, 0x0203
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	fc 01       	movw	r30, r24
    123c:	e7 51       	subi	r30, 0x17	; 23
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	8d 8f       	std	Y+29, r24	; 0x1d
    1244:	32 c0       	rjmp	.+100    	; 0x12aa <Get_Key_pressed+0x35a>
	else if (colloc == 0x0D)
    1246:	80 91 02 02 	lds	r24, 0x0202
    124a:	8d 30       	cpi	r24, 0x0D	; 13
    124c:	71 f4       	brne	.+28     	; 0x126a <Get_Key_pressed+0x31a>
		return(keypad[rowloc][1]);
    124e:	80 91 03 02 	lds	r24, 0x0203
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	fc 01       	movw	r30, r24
    1260:	e6 51       	subi	r30, 0x16	; 22
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	80 81       	ld	r24, Z
    1266:	8d 8f       	std	Y+29, r24	; 0x1d
    1268:	20 c0       	rjmp	.+64     	; 0x12aa <Get_Key_pressed+0x35a>
	else if (colloc == 0x0B)
    126a:	80 91 02 02 	lds	r24, 0x0202
    126e:	8b 30       	cpi	r24, 0x0B	; 11
    1270:	79 f4       	brne	.+30     	; 0x1290 <Get_Key_pressed+0x340>
		return(keypad[rowloc][2]);
    1272:	80 91 03 02 	lds	r24, 0x0203
    1276:	88 2f       	mov	r24, r24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	fc 01       	movw	r30, r24
    1286:	e7 51       	subi	r30, 0x17	; 23
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	80 81       	ld	r24, Z
    128c:	8d 8f       	std	Y+29, r24	; 0x1d
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <Get_Key_pressed+0x35a>
	else
		return(keypad[rowloc][3]);
    1290:	80 91 03 02 	lds	r24, 0x0203
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	fc 01       	movw	r30, r24
    12a2:	e4 51       	subi	r30, 0x14	; 20
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	80 81       	ld	r24, Z
    12a8:	8d 8f       	std	Y+29, r24	; 0x1d
    12aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    12ac:	6d 96       	adiw	r28, 0x1d	; 29
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <LCD_send_command>:
 *      Author: abdelrhman
 */
#include "LCD.h"

void LCD_send_command( uint8_t command)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	e9 97       	sbiw	r28, 0x39	; 57
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	89 af       	std	Y+57, r24	; 0x39
	PORTA &= ~(1<<3);	//set RS to 0 to send command
    12d4:	ab e3       	ldi	r26, 0x3B	; 59
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	87 7f       	andi	r24, 0xF7	; 247
    12e0:	8c 93       	st	X, r24
	PORTA &= ~(1<<4); 	//set RW t0 0 to write
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	8f 7e       	andi	r24, 0xEF	; 239
    12ee:	8c 93       	st	X, r24
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 ea       	ldi	r26, 0xA0	; 160
    12f6:	b1 e4       	ldi	r27, 0x41	; 65
    12f8:	8d ab       	std	Y+53, r24	; 0x35
    12fa:	9e ab       	std	Y+54, r25	; 0x36
    12fc:	af ab       	std	Y+55, r26	; 0x37
    12fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1300:	6d a9       	ldd	r22, Y+53	; 0x35
    1302:	7e a9       	ldd	r23, Y+54	; 0x36
    1304:	8f a9       	ldd	r24, Y+55	; 0x37
    1306:	98 ad       	ldd	r25, Y+56	; 0x38
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a e7       	ldi	r20, 0x7A	; 122
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	89 ab       	std	Y+49, r24	; 0x31
    131a:	9a ab       	std	Y+50, r25	; 0x32
    131c:	ab ab       	std	Y+51, r26	; 0x33
    131e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1320:	69 a9       	ldd	r22, Y+49	; 0x31
    1322:	7a a9       	ldd	r23, Y+50	; 0x32
    1324:	8b a9       	ldd	r24, Y+51	; 0x33
    1326:	9c a9       	ldd	r25, Y+52	; 0x34
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	2c f4       	brge	.+10     	; 0x1342 <LCD_send_command+0x84>
		__ticks = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	98 ab       	std	Y+48, r25	; 0x30
    133e:	8f a7       	std	Y+47, r24	; 0x2f
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <LCD_send_command+0x102>
	else if (__tmp > 65535)
    1342:	69 a9       	ldd	r22, Y+49	; 0x31
    1344:	7a a9       	ldd	r23, Y+50	; 0x32
    1346:	8b a9       	ldd	r24, Y+51	; 0x33
    1348:	9c a9       	ldd	r25, Y+52	; 0x34
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	4f e7       	ldi	r20, 0x7F	; 127
    1350:	57 e4       	ldi	r21, 0x47	; 71
    1352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1356:	18 16       	cp	r1, r24
    1358:	4c f5       	brge	.+82     	; 0x13ac <LCD_send_command+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135a:	6d a9       	ldd	r22, Y+53	; 0x35
    135c:	7e a9       	ldd	r23, Y+54	; 0x36
    135e:	8f a9       	ldd	r24, Y+55	; 0x37
    1360:	98 ad       	ldd	r25, Y+56	; 0x38
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e2       	ldi	r20, 0x20	; 32
    1368:	51 e4       	ldi	r21, 0x41	; 65
    136a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	98 ab       	std	Y+48, r25	; 0x30
    1380:	8f a7       	std	Y+47, r24	; 0x2f
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <LCD_send_command+0xe4>
    1384:	89 e1       	ldi	r24, 0x19	; 25
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9e a7       	std	Y+46, r25	; 0x2e
    138a:	8d a7       	std	Y+45, r24	; 0x2d
    138c:	8d a5       	ldd	r24, Y+45	; 0x2d
    138e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_send_command+0xd2>
    1394:	9e a7       	std	Y+46, r25	; 0x2e
    1396:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	8f a5       	ldd	r24, Y+47	; 0x2f
    139a:	98 a9       	ldd	r25, Y+48	; 0x30
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	98 ab       	std	Y+48, r25	; 0x30
    13a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a4:	98 a9       	ldd	r25, Y+48	; 0x30
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f7       	brne	.-38     	; 0x1384 <LCD_send_command+0xc6>
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <LCD_send_command+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	69 a9       	ldd	r22, Y+49	; 0x31
    13ae:	7a a9       	ldd	r23, Y+50	; 0x32
    13b0:	8b a9       	ldd	r24, Y+51	; 0x33
    13b2:	9c a9       	ldd	r25, Y+52	; 0x34
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
    13c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c2:	98 a9       	ldd	r25, Y+48	; 0x30
    13c4:	9c a7       	std	Y+44, r25	; 0x2c
    13c6:	8b a7       	std	Y+43, r24	; 0x2b
    13c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <LCD_send_command+0x10e>
    13d0:	9c a7       	std	Y+44, r25	; 0x2c
    13d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);
	PORTD |= (1<<7);	//enable LCD by set E
    13d4:	a2 e3       	ldi	r26, 0x32	; 50
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	8c 93       	st	X, r24
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 ea       	ldi	r26, 0xA0	; 160
    13e8:	b1 e4       	ldi	r27, 0x41	; 65
    13ea:	8f a3       	std	Y+39, r24	; 0x27
    13ec:	98 a7       	std	Y+40, r25	; 0x28
    13ee:	a9 a7       	std	Y+41, r26	; 0x29
    13f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	6f a1       	ldd	r22, Y+39	; 0x27
    13f4:	78 a5       	ldd	r23, Y+40	; 0x28
    13f6:	89 a5       	ldd	r24, Y+41	; 0x29
    13f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a e7       	ldi	r20, 0x7A	; 122
    1400:	53 e4       	ldi	r21, 0x43	; 67
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	8b a3       	std	Y+35, r24	; 0x23
    140c:	9c a3       	std	Y+36, r25	; 0x24
    140e:	ad a3       	std	Y+37, r26	; 0x25
    1410:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1412:	6b a1       	ldd	r22, Y+35	; 0x23
    1414:	7c a1       	ldd	r23, Y+36	; 0x24
    1416:	8d a1       	ldd	r24, Y+37	; 0x25
    1418:	9e a1       	ldd	r25, Y+38	; 0x26
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <LCD_send_command+0x176>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9a a3       	std	Y+34, r25	; 0x22
    1430:	89 a3       	std	Y+33, r24	; 0x21
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <LCD_send_command+0x1f4>
	else if (__tmp > 65535)
    1434:	6b a1       	ldd	r22, Y+35	; 0x23
    1436:	7c a1       	ldd	r23, Y+36	; 0x24
    1438:	8d a1       	ldd	r24, Y+37	; 0x25
    143a:	9e a1       	ldd	r25, Y+38	; 0x26
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1448:	18 16       	cp	r1, r24
    144a:	4c f5       	brge	.+82     	; 0x149e <LCD_send_command+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	6f a1       	ldd	r22, Y+39	; 0x27
    144e:	78 a5       	ldd	r23, Y+40	; 0x28
    1450:	89 a5       	ldd	r24, Y+41	; 0x29
    1452:	9a a5       	ldd	r25, Y+42	; 0x2a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	9a a3       	std	Y+34, r25	; 0x22
    1472:	89 a3       	std	Y+33, r24	; 0x21
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <LCD_send_command+0x1d6>
    1476:	89 e1       	ldi	r24, 0x19	; 25
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	98 a3       	std	Y+32, r25	; 0x20
    147c:	8f 8f       	std	Y+31, r24	; 0x1f
    147e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1480:	98 a1       	ldd	r25, Y+32	; 0x20
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_send_command+0x1c4>
    1486:	98 a3       	std	Y+32, r25	; 0x20
    1488:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9a a3       	std	Y+34, r25	; 0x22
    1492:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1494:	89 a1       	ldd	r24, Y+33	; 0x21
    1496:	9a a1       	ldd	r25, Y+34	; 0x22
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f7       	brne	.-38     	; 0x1476 <LCD_send_command+0x1b8>
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <LCD_send_command+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	6b a1       	ldd	r22, Y+35	; 0x23
    14a0:	7c a1       	ldd	r23, Y+36	; 0x24
    14a2:	8d a1       	ldd	r24, Y+37	; 0x25
    14a4:	9e a1       	ldd	r25, Y+38	; 0x26
    14a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9a a3       	std	Y+34, r25	; 0x22
    14b0:	89 a3       	std	Y+33, r24	; 0x21
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	9a a1       	ldd	r25, Y+34	; 0x22
    14b6:	9e 8f       	std	Y+30, r25	; 0x1e
    14b8:	8d 8f       	std	Y+29, r24	; 0x1d
    14ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_send_command+0x200>
    14c2:	9e 8f       	std	Y+30, r25	; 0x1e
    14c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	PORTB = command;	 //write the command to port
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	89 ad       	ldd	r24, Y+57	; 0x39
    14cc:	80 83       	st	Z, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 ea       	ldi	r26, 0xA0	; 160
    14d4:	b1 e4       	ldi	r27, 0x41	; 65
    14d6:	89 8f       	std	Y+25, r24	; 0x19
    14d8:	9a 8f       	std	Y+26, r25	; 0x1a
    14da:	ab 8f       	std	Y+27, r26	; 0x1b
    14dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	69 8d       	ldd	r22, Y+25	; 0x19
    14e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8d 8b       	std	Y+21, r24	; 0x15
    14f8:	9e 8b       	std	Y+22, r25	; 0x16
    14fa:	af 8b       	std	Y+23, r26	; 0x17
    14fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <LCD_send_command+0x262>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	3f c0       	rjmp	.+126    	; 0x159e <LCD_send_command+0x2e0>
	else if (__tmp > 65535)
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <LCD_send_command+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <LCD_send_command+0x2c2>
    1562:	89 e1       	ldi	r24, 0x19	; 25
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9a 8b       	std	Y+18, r25	; 0x12
    1568:	89 8b       	std	Y+17, r24	; 0x11
    156a:	89 89       	ldd	r24, Y+17	; 0x11
    156c:	9a 89       	ldd	r25, Y+18	; 0x12
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <LCD_send_command+0x2b0>
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <LCD_send_command+0x2a4>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <LCD_send_command+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	8b 8b       	std	Y+19, r24	; 0x13
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	8f 87       	std	Y+15, r24	; 0x0f
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_send_command+0x2ec>
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	PORTD &= ~(1<<7);	//disable LCD by reset E
    15b2:	a2 e3       	ldi	r26, 0x32	; 50
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e2 e3       	ldi	r30, 0x32	; 50
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 77       	andi	r24, 0x7F	; 127
    15be:	8c 93       	st	X, r24
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a0 e2       	ldi	r26, 0x20	; 32
    15c6:	b1 e4       	ldi	r27, 0x41	; 65
    15c8:	8b 87       	std	Y+11, r24	; 0x0b
    15ca:	9c 87       	std	Y+12, r25	; 0x0c
    15cc:	ad 87       	std	Y+13, r26	; 0x0d
    15ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4a e7       	ldi	r20, 0x7A	; 122
    15de:	53 e4       	ldi	r21, 0x43	; 67
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	8f 83       	std	Y+7, r24	; 0x07
    15ea:	98 87       	std	Y+8, r25	; 0x08
    15ec:	a9 87       	std	Y+9, r26	; 0x09
    15ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1604:	88 23       	and	r24, r24
    1606:	2c f4       	brge	.+10     	; 0x1612 <LCD_send_command+0x354>
		__ticks = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <LCD_send_command+0x3d2>
	else if (__tmp > 65535)
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	4c f5       	brge	.+82     	; 0x167c <LCD_send_command+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	6b 85       	ldd	r22, Y+11	; 0x0b
    162c:	7c 85       	ldd	r23, Y+12	; 0x0c
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e2       	ldi	r20, 0x20	; 32
    1638:	51 e4       	ldi	r21, 0x41	; 65
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	0f c0       	rjmp	.+30     	; 0x1672 <LCD_send_command+0x3b4>
    1654:	89 e1       	ldi	r24, 0x19	; 25
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <LCD_send_command+0x3a2>
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f7       	brne	.-38     	; 0x1654 <LCD_send_command+0x396>
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <LCD_send_command+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	6f 81       	ldd	r22, Y+7	; 0x07
    167e:	78 85       	ldd	r23, Y+8	; 0x08
    1680:	89 85       	ldd	r24, Y+9	; 0x09
    1682:	9a 85       	ldd	r25, Y+10	; 0x0a
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_send_command+0x3de>
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    16a4:	e9 96       	adiw	r28, 0x39	; 57
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_initialize>:


void LCD_initialize()
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xff; 						//make all port as output
    16be:	e7 e3       	ldi	r30, 0x37	; 55
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
	DDRA |= (1<<3)|(1<<4);				//make RS,RW as output
    16c6:	aa e3       	ldi	r26, 0x3A	; 58
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ea e3       	ldi	r30, 0x3A	; 58
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	88 61       	ori	r24, 0x18	; 24
    16d2:	8c 93       	st	X, r24
	DDRD |= (1<<7);						//make E as output
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	8c 93       	st	X, r24
	LCD_send_command(LCD_set_mode_8bit_2r);	//set the mode to 8 bit , 2 row
    16e2:	88 e3       	ldi	r24, 0x38	; 56
    16e4:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
	LCD_send_command(LCD_display_on_cursor_off);
    16e8:	8c e0       	ldi	r24, 0x0C	; 12
    16ea:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
	LCD_send_command(LCD_auto_increment_cursor);
    16ee:	86 e0       	ldi	r24, 0x06	; 6
    16f0:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
	LCD_send_command(LCD_clear_screen);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
	LCD_send_command(LCD_set_cursor_r0 | 0 ); //set Cursor to home position
    16fa:	80 e8       	ldi	r24, 0x80	; 128
    16fc:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <LCD_set_Cursor>:

//row is in range (0:1)  .... pos is in range (0:15)
//if it is out of range ... it will print with current position
void LCD_set_Cursor( uint8_t row , uint8_t pos )
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <LCD_set_Cursor+0x6>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	6a 83       	std	Y+2, r22	; 0x02
	if (row == 0 && pos<16)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 23       	and	r24, r24
    1718:	49 f4       	brne	.+18     	; 0x172c <LCD_set_Cursor+0x26>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 31       	cpi	r24, 0x10	; 16
    171e:	30 f4       	brcc	.+12     	; 0x172c <LCD_set_Cursor+0x26>
		LCD_send_command((pos & 0x0F) | LCD_set_cursor_r0);
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	8f 70       	andi	r24, 0x0F	; 15
    1724:	80 68       	ori	r24, 0x80	; 128
    1726:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
    172a:	0b c0       	rjmp	.+22     	; 0x1742 <LCD_set_Cursor+0x3c>
	else if (row == 1 && pos<16)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	41 f4       	brne	.+16     	; 0x1742 <LCD_set_Cursor+0x3c>
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 31       	cpi	r24, 0x10	; 16
    1736:	28 f4       	brcc	.+10     	; 0x1742 <LCD_set_Cursor+0x3c>
		LCD_send_command((pos & 0x0F) | LCD_set_cursor_r1);
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	8f 70       	andi	r24, 0x0F	; 15
    173c:	80 6c       	ori	r24, 0xC0	; 192
    173e:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <LCD_display_char>:

//display data on LCD
void LCD_display_char( uint8_t data )
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	e9 97       	sbiw	r28, 0x39	; 57
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	89 af       	std	Y+57, r24	; 0x39
	PORTA |=  (1<<3); 	//set RS to 1 to send data
    1762:	ab e3       	ldi	r26, 0x3B	; 59
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e3       	ldi	r30, 0x3B	; 59
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 60       	ori	r24, 0x08	; 8
    176e:	8c 93       	st	X, r24
	PORTD &= ~(1<<3);	//set RW t0 0 to write
    1770:	a2 e3       	ldi	r26, 0x32	; 50
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	87 7f       	andi	r24, 0xF7	; 247
    177c:	8c 93       	st	X, r24
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 ea       	ldi	r26, 0xA0	; 160
    1784:	b0 e4       	ldi	r27, 0x40	; 64
    1786:	8d ab       	std	Y+53, r24	; 0x35
    1788:	9e ab       	std	Y+54, r25	; 0x36
    178a:	af ab       	std	Y+55, r26	; 0x37
    178c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6d a9       	ldd	r22, Y+53	; 0x35
    1790:	7e a9       	ldd	r23, Y+54	; 0x36
    1792:	8f a9       	ldd	r24, Y+55	; 0x37
    1794:	98 ad       	ldd	r25, Y+56	; 0x38
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a e7       	ldi	r20, 0x7A	; 122
    179c:	53 e4       	ldi	r21, 0x43	; 67
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	89 ab       	std	Y+49, r24	; 0x31
    17a8:	9a ab       	std	Y+50, r25	; 0x32
    17aa:	ab ab       	std	Y+51, r26	; 0x33
    17ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ae:	69 a9       	ldd	r22, Y+49	; 0x31
    17b0:	7a a9       	ldd	r23, Y+50	; 0x32
    17b2:	8b a9       	ldd	r24, Y+51	; 0x33
    17b4:	9c a9       	ldd	r25, Y+52	; 0x34
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <LCD_display_char+0x84>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	98 ab       	std	Y+48, r25	; 0x30
    17cc:	8f a7       	std	Y+47, r24	; 0x2f
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <LCD_display_char+0x102>
	else if (__tmp > 65535)
    17d0:	69 a9       	ldd	r22, Y+49	; 0x31
    17d2:	7a a9       	ldd	r23, Y+50	; 0x32
    17d4:	8b a9       	ldd	r24, Y+51	; 0x33
    17d6:	9c a9       	ldd	r25, Y+52	; 0x34
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <LCD_display_char+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ea:	7e a9       	ldd	r23, Y+54	; 0x36
    17ec:	8f a9       	ldd	r24, Y+55	; 0x37
    17ee:	98 ad       	ldd	r25, Y+56	; 0x38
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	98 ab       	std	Y+48, r25	; 0x30
    180e:	8f a7       	std	Y+47, r24	; 0x2f
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <LCD_display_char+0xe4>
    1812:	89 e1       	ldi	r24, 0x19	; 25
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9e a7       	std	Y+46, r25	; 0x2e
    1818:	8d a7       	std	Y+45, r24	; 0x2d
    181a:	8d a5       	ldd	r24, Y+45	; 0x2d
    181c:	9e a5       	ldd	r25, Y+46	; 0x2e
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <LCD_display_char+0xd2>
    1822:	9e a7       	std	Y+46, r25	; 0x2e
    1824:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8f a5       	ldd	r24, Y+47	; 0x2f
    1828:	98 a9       	ldd	r25, Y+48	; 0x30
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	98 ab       	std	Y+48, r25	; 0x30
    182e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8f a5       	ldd	r24, Y+47	; 0x2f
    1832:	98 a9       	ldd	r25, Y+48	; 0x30
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <LCD_display_char+0xc6>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <LCD_display_char+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	69 a9       	ldd	r22, Y+49	; 0x31
    183c:	7a a9       	ldd	r23, Y+50	; 0x32
    183e:	8b a9       	ldd	r24, Y+51	; 0x33
    1840:	9c a9       	ldd	r25, Y+52	; 0x34
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	98 ab       	std	Y+48, r25	; 0x30
    184c:	8f a7       	std	Y+47, r24	; 0x2f
    184e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1850:	98 a9       	ldd	r25, Y+48	; 0x30
    1852:	9c a7       	std	Y+44, r25	; 0x2c
    1854:	8b a7       	std	Y+43, r24	; 0x2b
    1856:	8b a5       	ldd	r24, Y+43	; 0x2b
    1858:	9c a5       	ldd	r25, Y+44	; 0x2c
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_display_char+0x10e>
    185e:	9c a7       	std	Y+44, r25	; 0x2c
    1860:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	PORTD |= (1<<7);	//enable LCD by set E
    1862:	a2 e3       	ldi	r26, 0x32	; 50
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e2 e3       	ldi	r30, 0x32	; 50
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 68       	ori	r24, 0x80	; 128
    186e:	8c 93       	st	X, r24
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ea       	ldi	r26, 0xA0	; 160
    1876:	b0 e4       	ldi	r27, 0x40	; 64
    1878:	8f a3       	std	Y+39, r24	; 0x27
    187a:	98 a7       	std	Y+40, r25	; 0x28
    187c:	a9 a7       	std	Y+41, r26	; 0x29
    187e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6f a1       	ldd	r22, Y+39	; 0x27
    1882:	78 a5       	ldd	r23, Y+40	; 0x28
    1884:	89 a5       	ldd	r24, Y+41	; 0x29
    1886:	9a a5       	ldd	r25, Y+42	; 0x2a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	53 e4       	ldi	r21, 0x43	; 67
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8b a3       	std	Y+35, r24	; 0x23
    189a:	9c a3       	std	Y+36, r25	; 0x24
    189c:	ad a3       	std	Y+37, r26	; 0x25
    189e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18a0:	6b a1       	ldd	r22, Y+35	; 0x23
    18a2:	7c a1       	ldd	r23, Y+36	; 0x24
    18a4:	8d a1       	ldd	r24, Y+37	; 0x25
    18a6:	9e a1       	ldd	r25, Y+38	; 0x26
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <LCD_display_char+0x176>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <LCD_display_char+0x1f4>
	else if (__tmp > 65535)
    18c2:	6b a1       	ldd	r22, Y+35	; 0x23
    18c4:	7c a1       	ldd	r23, Y+36	; 0x24
    18c6:	8d a1       	ldd	r24, Y+37	; 0x25
    18c8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <LCD_display_char+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6f a1       	ldd	r22, Y+39	; 0x27
    18dc:	78 a5       	ldd	r23, Y+40	; 0x28
    18de:	89 a5       	ldd	r24, Y+41	; 0x29
    18e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9a a3       	std	Y+34, r25	; 0x22
    1900:	89 a3       	std	Y+33, r24	; 0x21
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LCD_display_char+0x1d6>
    1904:	89 e1       	ldi	r24, 0x19	; 25
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	98 a3       	std	Y+32, r25	; 0x20
    190a:	8f 8f       	std	Y+31, r24	; 0x1f
    190c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190e:	98 a1       	ldd	r25, Y+32	; 0x20
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_display_char+0x1c4>
    1914:	98 a3       	std	Y+32, r25	; 0x20
    1916:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	89 a1       	ldd	r24, Y+33	; 0x21
    1924:	9a a1       	ldd	r25, Y+34	; 0x22
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <LCD_display_char+0x1b8>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <LCD_display_char+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6b a1       	ldd	r22, Y+35	; 0x23
    192e:	7c a1       	ldd	r23, Y+36	; 0x24
    1930:	8d a1       	ldd	r24, Y+37	; 0x25
    1932:	9e a1       	ldd	r25, Y+38	; 0x26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	9e 8f       	std	Y+30, r25	; 0x1e
    1946:	8d 8f       	std	Y+29, r24	; 0x1d
    1948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_display_char+0x200>
    1950:	9e 8f       	std	Y+30, r25	; 0x1e
    1952:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	PORTB = data;		//write data to port (set data)
    1954:	e8 e3       	ldi	r30, 0x38	; 56
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	89 ad       	ldd	r24, Y+57	; 0x39
    195a:	80 83       	st	Z, r24
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 ea       	ldi	r26, 0xA0	; 160
    1962:	b0 e4       	ldi	r27, 0x40	; 64
    1964:	89 8f       	std	Y+25, r24	; 0x19
    1966:	9a 8f       	std	Y+26, r25	; 0x1a
    1968:	ab 8f       	std	Y+27, r26	; 0x1b
    196a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	69 8d       	ldd	r22, Y+25	; 0x19
    196e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8d 8b       	std	Y+21, r24	; 0x15
    1986:	9e 8b       	std	Y+22, r25	; 0x16
    1988:	af 8b       	std	Y+23, r26	; 0x17
    198a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_display_char+0x262>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <LCD_display_char+0x2e0>
	else if (__tmp > 65535)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <LCD_display_char+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	69 8d       	ldd	r22, Y+25	; 0x19
    19c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <LCD_display_char+0x2c2>
    19f0:	89 e1       	ldi	r24, 0x19	; 25
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_display_char+0x2b0>
    1a00:	9a 8b       	std	Y+18, r25	; 0x12
    1a02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <LCD_display_char+0x2a4>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <LCD_display_char+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9c 8b       	std	Y+20, r25	; 0x14
    1a2a:	8b 8b       	std	Y+19, r24	; 0x13
    1a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
    1a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a36:	98 89       	ldd	r25, Y+16	; 0x10
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_display_char+0x2ec>
    1a3c:	98 8b       	std	Y+16, r25	; 0x10
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	PORTD &= ~(1<<7);	//disable LCD by reset E
    1a40:	a2 e3       	ldi	r26, 0x32	; 50
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e2 e3       	ldi	r30, 0x32	; 50
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 77       	andi	r24, 0x7F	; 127
    1a4c:	8c 93       	st	X, r24
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 ea       	ldi	r26, 0xA0	; 160
    1a54:	b0 e4       	ldi	r27, 0x40	; 64
    1a56:	8b 87       	std	Y+11, r24	; 0x0b
    1a58:	9c 87       	std	Y+12, r25	; 0x0c
    1a5a:	ad 87       	std	Y+13, r26	; 0x0d
    1a5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8f 83       	std	Y+7, r24	; 0x07
    1a78:	98 87       	std	Y+8, r25	; 0x08
    1a7a:	a9 87       	std	Y+9, r26	; 0x09
    1a7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_display_char+0x354>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_display_char+0x3d2>
	else if (__tmp > 65535)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_display_char+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_display_char+0x3b4>
    1ae2:	89 e1       	ldi	r24, 0x19	; 25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_display_char+0x3a2>
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_display_char+0x396>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_display_char+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_display_char+0x3de>
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1b32:	e9 96       	adiw	r28, 0x39	; 57
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <LCD_display_text>:

void LCD_display_text( char *str , double delay  )
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	65 97       	sbiw	r28, 0x15	; 21
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	99 8b       	std	Y+17, r25	; 0x11
    1b5a:	88 8b       	std	Y+16, r24	; 0x10
    1b5c:	4a 8b       	std	Y+18, r20	; 0x12
    1b5e:	5b 8b       	std	Y+19, r21	; 0x13
    1b60:	6c 8b       	std	Y+20, r22	; 0x14
    1b62:	7d 8b       	std	Y+21, r23	; 0x15
	uint8_t i;
	for(i = 0 ; str[i] ; i++ )
    1b64:	1f 86       	std	Y+15, r1	; 0x0f
    1b66:	80 c0       	rjmp	.+256    	; 0x1c68 <LCD_display_text+0x124>
	{
		LCD_display_char( str[i] );
    1b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	88 89       	ldd	r24, Y+16	; 0x10
    1b70:	99 89       	ldd	r25, Y+17	; 0x11
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_display_char>
    1b7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b80:	9b 89       	ldd	r25, Y+19	; 0x13
    1b82:	ac 89       	ldd	r26, Y+20	; 0x14
    1b84:	bd 89       	ldd	r27, Y+21	; 0x15
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <LCD_display_text+0x8c>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <LCD_display_text+0x10a>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <LCD_display_text+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <LCD_display_text+0xec>
    1c12:	89 e1       	ldi	r24, 0x19	; 25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_display_text+0xda>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <LCD_display_text+0xce>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <LCD_display_text+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_display_text+0x116>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_display_text( char *str , double delay  )
{
	uint8_t i;
	for(i = 0 ; str[i] ; i++ )
    1c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	8f 87       	std	Y+15, r24	; 0x0f
    1c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	88 89       	ldd	r24, Y+16	; 0x10
    1c70:	99 89       	ldd	r25, Y+17	; 0x11
    1c72:	fc 01       	movw	r30, r24
    1c74:	e2 0f       	add	r30, r18
    1c76:	f3 1f       	adc	r31, r19
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 23       	and	r24, r24
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <LCD_display_text+0x13c>
    1c7e:	74 cf       	rjmp	.-280    	; 0x1b68 <LCD_display_text+0x24>
	{
		LCD_display_char( str[i] );
		_delay_ms(delay);
	}
}
    1c80:	65 96       	adiw	r28, 0x15	; 21
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <LCD_shift_entire_display>:

//dir : direction of shift ---> 0: left , 1: right
//num_shift : how many time you want to shift
// delay : the delay between every shift in ms
void LCD_shift_entire_display( uint8_t dir , uint8_t num_shift , double delay)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	a3 97       	sbiw	r28, 0x23	; 35
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca8:	6f 8f       	std	Y+31, r22	; 0x1f
    1caa:	28 a3       	std	Y+32, r18	; 0x20
    1cac:	39 a3       	std	Y+33, r19	; 0x21
    1cae:	4a a3       	std	Y+34, r20	; 0x22
    1cb0:	5b a3       	std	Y+35, r21	; 0x23
	uint8_t i;
	for(i = 0 ; i< num_shift ; i++)
    1cb2:	1d 8e       	std	Y+29, r1	; 0x1d
    1cb4:	f2 c0       	rjmp	.+484    	; 0x1e9a <LCD_shift_entire_display+0x208>
	{
		if(dir == 0)
    1cb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <LCD_shift_entire_display+0x2c>
    1cbc:	76 c0       	rjmp	.+236    	; 0x1daa <LCD_shift_entire_display+0x118>
		{
			LCD_send_command(LCD_shift_entire_left);/* shift entire display left */
    1cbe:	88 e1       	ldi	r24, 0x18	; 24
    1cc0:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
    1cc4:	88 a1       	ldd	r24, Y+32	; 0x20
    1cc6:	99 a1       	ldd	r25, Y+33	; 0x21
    1cc8:	aa a1       	ldd	r26, Y+34	; 0x22
    1cca:	bb a1       	ldd	r27, Y+35	; 0x23
    1ccc:	89 8f       	std	Y+25, r24	; 0x19
    1cce:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a e7       	ldi	r20, 0x7A	; 122
    1ce2:	53 e4       	ldi	r21, 0x43	; 67
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8d 8b       	std	Y+21, r24	; 0x15
    1cee:	9e 8b       	std	Y+22, r25	; 0x16
    1cf0:	af 8b       	std	Y+23, r26	; 0x17
    1cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <LCD_shift_entire_display+0x84>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <LCD_shift_entire_display+0x102>
	else if (__tmp > 65535)
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <LCD_shift_entire_display+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_shift_entire_display+0xe4>
    1d58:	89 e1       	ldi	r24, 0x19	; 25
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9a 8b       	std	Y+18, r25	; 0x12
    1d5e:	89 8b       	std	Y+17, r24	; 0x11
    1d60:	89 89       	ldd	r24, Y+17	; 0x11
    1d62:	9a 89       	ldd	r25, Y+18	; 0x12
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_shift_entire_display+0xd2>
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_shift_entire_display+0xc6>
    1d7e:	8a c0       	rjmp	.+276    	; 0x1e94 <LCD_shift_entire_display+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	98 8b       	std	Y+16, r25	; 0x10
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	98 89       	ldd	r25, Y+16	; 0x10
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_shift_entire_display+0x10e>
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f
    1da8:	75 c0       	rjmp	.+234    	; 0x1e94 <LCD_shift_entire_display+0x202>
			_delay_ms(delay);
		}
		else
		{
			LCD_send_command(LCD_shift_entire_right);/* shift entire display right */
    1daa:	8c e1       	ldi	r24, 0x1C	; 28
    1dac:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
    1db0:	88 a1       	ldd	r24, Y+32	; 0x20
    1db2:	99 a1       	ldd	r25, Y+33	; 0x21
    1db4:	aa a1       	ldd	r26, Y+34	; 0x22
    1db6:	bb a1       	ldd	r27, Y+35	; 0x23
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a e7       	ldi	r20, 0x7A	; 122
    1dce:	53 e4       	ldi	r21, 0x43	; 67
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <LCD_shift_entire_display+0x170>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <LCD_shift_entire_display+0x1ee>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <LCD_shift_entire_display+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <LCD_shift_entire_display+0x1d0>
    1e44:	89 e1       	ldi	r24, 0x19	; 25
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_shift_entire_display+0x1be>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <LCD_shift_entire_display+0x1b2>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <LCD_shift_entire_display+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_shift_entire_display+0x1fa>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
//num_shift : how many time you want to shift
// delay : the delay between every shift in ms
void LCD_shift_entire_display( uint8_t dir , uint8_t num_shift , double delay)
{
	uint8_t i;
	for(i = 0 ; i< num_shift ; i++)
    1e94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	8d 8f       	std	Y+29, r24	; 0x1d
    1e9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9e:	98 17       	cp	r25, r24
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <LCD_shift_entire_display+0x212>
    1ea2:	09 cf       	rjmp	.-494    	; 0x1cb6 <LCD_shift_entire_display+0x24>
		{
			LCD_send_command(LCD_shift_entire_right);/* shift entire display right */
			_delay_ms(delay);
		}
	}
}
    1ea4:	a3 96       	adiw	r28, 0x23	; 35
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_clear>:

void LCD_clear()
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	LCD_send_command(LCD_clear_screen);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
	LCD_send_command(LCD_set_cursor_r0 | 0 ); //set Cursor to home postion
    1ec4:	80 e8       	ldi	r24, 0x80	; 128
    1ec6:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_send_command>
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <PIR_initialize>:
 */

#include "PIR.h"

void PIR_initialize()
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	DDRA &= ~(1<<1); // define pin A1 as input
    1ed8:	aa e3       	ldi	r26, 0x3A	; 58
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	ea e3       	ldi	r30, 0x3A	; 58
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8d 7f       	andi	r24, 0xFD	; 253
    1ee4:	8c 93       	st	X, r24
	DDRD |= (1<<6) ; // define pin D6 as led output
    1ee6:	a1 e3       	ldi	r26, 0x31	; 49
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e1 e3       	ldi	r30, 0x31	; 49
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 64       	ori	r24, 0x40	; 64
    1ef2:	8c 93       	st	X, r24
}
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <PIR_DETECT_MOTION>:

void PIR_DETECT_MOTION()
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	if ( PINA & (1<<1) )
    1f02:	e9 e3       	ldi	r30, 0x39	; 57
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	82 70       	andi	r24, 0x02	; 2
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	41 f0       	breq	.+16     	; 0x1f24 <PIR_DETECT_MOTION+0x2a>
	PORTD |= (1<<6); //PIR led on
    1f14:	a2 e3       	ldi	r26, 0x32	; 50
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e2 e3       	ldi	r30, 0x32	; 50
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 64       	ori	r24, 0x40	; 64
    1f20:	8c 93       	st	X, r24
    1f22:	07 c0       	rjmp	.+14     	; 0x1f32 <PIR_DETECT_MOTION+0x38>
	else
	PORTD &=~ (1<<6); //PIR led off
    1f24:	a2 e3       	ldi	r26, 0x32	; 50
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e2 e3       	ldi	r30, 0x32	; 50
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8f 7b       	andi	r24, 0xBF	; 191
    1f30:	8c 93       	st	X, r24
}
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <Temp_initialize>:
 */

#include "TEMP.h"

void Temp_initialize()
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
	DDRA &= ~(1 << 0);	        /* Make ADC portA0 as input */
    1f40:	aa e3       	ldi	r26, 0x3A	; 58
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ea e3       	ldi	r30, 0x3A	; 58
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8e 7f       	andi	r24, 0xFE	; 254
    1f4c:	8c 93       	st	X, r24
	DDRD |= (1 << 1);           //make port D1 output
    1f4e:	a1 e3       	ldi	r26, 0x31	; 49
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e1 e3       	ldi	r30, 0x31	; 49
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	82 60       	ori	r24, 0x02	; 2
    1f5a:	8c 93       	st	X, r24
	ADCSRA = 0x87;          /* Enable ADC, with freq/128  */
    1f5c:	e6 e2       	ldi	r30, 0x26	; 38
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	87 e8       	ldi	r24, 0x87	; 135
    1f62:	80 83       	st	Z, r24
	ADMUX = 0x40;          /* Vref: Avcc, ADC channel: 0 */
    1f64:	e7 e2       	ldi	r30, 0x27	; 39
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 e4       	ldi	r24, 0x40	; 64
    1f6a:	80 83       	st	Z, r24
}
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <Temp_Read>:

  int Temp_Read(char channel)
  {
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	2f 97       	sbiw	r28, 0x0f	; 15
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	8f 87       	std	Y+15, r24	; 0x0f
	  ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    1f88:	e7 e2       	ldi	r30, 0x27	; 39
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8e:	87 70       	andi	r24, 0x07	; 7
    1f90:	80 64       	ori	r24, 0x40	; 64
    1f92:	80 83       	st	Z, r24
	  ADCSRA |= (1 << ADSC);               /* Start ADC conversion */
    1f94:	a6 e2       	ldi	r26, 0x26	; 38
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e6 e2       	ldi	r30, 0x26	; 38
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 64       	ori	r24, 0x40	; 64
    1fa0:	8c 93       	st	X, r24
	  while (!(ADCSRA & (1 << ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    1fa2:	e6 e2       	ldi	r30, 0x26	; 38
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	80 71       	andi	r24, 0x10	; 16
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	b9 f3       	breq	.-18     	; 0x1fa2 <Temp_Read+0x30>
	  ADCSRA |= (1 << ADIF);               /* Clear interrupt flag */
    1fb4:	a6 e2       	ldi	r26, 0x26	; 38
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e2       	ldi	r30, 0x26	; 38
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 61       	ori	r24, 0x10	; 16
    1fc0:	8c 93       	st	X, r24
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <Temp_Read+0xa2>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <Temp_Read+0x120>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <Temp_Read+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <Temp_Read+0x102>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <Temp_Read+0xf0>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <Temp_Read+0xe4>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <Temp_Read+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <Temp_Read+0x12c>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(1);                      /* Wait a little bit */
	  return ADCW;                       /* Return ADC word */
    20a6:	e4 e2       	ldi	r30, 0x24	; 36
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	91 81       	ldd	r25, Z+1	; 0x01
  }
    20ae:	2f 96       	adiw	r28, 0x0f	; 15
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <Temp_GetInput>:

  int Temp_GetInput() //return integer number for temp
  {
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	60 97       	sbiw	r28, 0x10	; 16
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a8 ec       	ldi	r26, 0xC8	; 200
    20da:	b2 e4       	ldi	r27, 0x42	; 66
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
    20de:	9c 87       	std	Y+12, r25	; 0x0c
    20e0:	ad 87       	std	Y+13, r26	; 0x0d
    20e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a e7       	ldi	r20, 0x7A	; 122
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8f 83       	std	Y+7, r24	; 0x07
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	a9 87       	std	Y+9, r26	; 0x09
    2102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <Temp_GetInput+0x66>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <Temp_GetInput+0xe4>
	else if (__tmp > 65535)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <Temp_GetInput+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <Temp_GetInput+0xc6>
    2168:	89 e1       	ldi	r24, 0x19	; 25
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <Temp_GetInput+0xb4>
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <Temp_GetInput+0xa8>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <Temp_GetInput+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <Temp_GetInput+0xf0>
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	int16_t celisius;
	_delay_ms(100);
	celisius = (Temp_Read(0)*4.88);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <Temp_Read>
    21be:	aa 27       	eor	r26, r26
    21c0:	97 fd       	sbrc	r25, 7
    21c2:	a0 95       	com	r26
    21c4:	ba 2f       	mov	r27, r26
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	26 ef       	ldi	r18, 0xF6	; 246
    21d8:	38 e2       	ldi	r19, 0x28	; 40
    21da:	4c e9       	ldi	r20, 0x9C	; 156
    21dc:	50 e4       	ldi	r21, 0x40	; 64
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
	celisius=(celisius/10.00);
    21f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f8:	98 89       	ldd	r25, Y+16	; 0x10
    21fa:	aa 27       	eor	r26, r26
    21fc:	97 fd       	sbrc	r25, 7
    21fe:	a0 95       	com	r26
    2200:	ba 2f       	mov	r27, r26
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	98 8b       	std	Y+16, r25	; 0x10
    2230:	8f 87       	std	Y+15, r24	; 0x0f
	return (int)celisius;
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	98 89       	ldd	r25, Y+16	; 0x10
  }
    2236:	60 96       	adiw	r28, 0x10	; 16
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <Temp_display>:

  void Temp_display(int temp )
  {
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	2c 97       	sbiw	r28, 0x0c	; 12
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	9c 87       	std	Y+12, r25	; 0x0c
    225e:	8b 87       	std	Y+11, r24	; 0x0b
	char tempe_to_print[10];
	sprintf(tempe_to_print,"%d%cC  ", (int)temp, degree_sysmbol);
    2260:	8d b7       	in	r24, 0x3d	; 61
    2262:	9e b7       	in	r25, 0x3e	; 62
    2264:	08 97       	sbiw	r24, 0x08	; 8
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	9e bf       	out	0x3e, r25	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	8d bf       	out	0x3d, r24	; 61
    2270:	ed b7       	in	r30, 0x3d	; 61
    2272:	fe b7       	in	r31, 0x3e	; 62
    2274:	31 96       	adiw	r30, 0x01	; 1
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	80 e6       	ldi	r24, 0x60	; 96
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	93 83       	std	Z+3, r25	; 0x03
    2284:	82 83       	std	Z+2, r24	; 0x02
    2286:	8b 85       	ldd	r24, Y+11	; 0x0b
    2288:	9c 85       	ldd	r25, Y+12	; 0x0c
    228a:	95 83       	std	Z+5, r25	; 0x05
    228c:	84 83       	std	Z+4, r24	; 0x04
    228e:	8f ed       	ldi	r24, 0xDF	; 223
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	97 83       	std	Z+7, r25	; 0x07
    2294:	86 83       	std	Z+6, r24	; 0x06
    2296:	0e 94 03 18 	call	0x3006	; 0x3006 <sprintf>
    229a:	8d b7       	in	r24, 0x3d	; 61
    229c:	9e b7       	in	r25, 0x3e	; 62
    229e:	08 96       	adiw	r24, 0x08	; 8
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	9e bf       	out	0x3e, r25	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	8d bf       	out	0x3d, r24	; 61
	LCD_clear();
    22aa:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_clear>
	LCD_set_Cursor(0,0);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
	LCD_display_text("temperature is :",700);
    22b6:	88 e6       	ldi	r24, 0x68	; 104
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	6f e2       	ldi	r22, 0x2F	; 47
    22c0:	74 e4       	ldi	r23, 0x44	; 68
    22c2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
	LCD_set_Cursor(1,0);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
	LCD_display_text(tempe_to_print,700);
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	6f e2       	ldi	r22, 0x2F	; 47
    22d8:	74 e4       	ldi	r23, 0x44	; 68
    22da:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
	//memset(temperature,0,10);
  }
    22de:	2c 96       	adiw	r28, 0x0c	; 12
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <Temp_warning>:

  void Temp_warning(int curr_temp , int max_temp)
  {
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <Temp_warning+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <Temp_warning+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	7c 83       	std	Y+4, r23	; 0x04
    2302:	6b 83       	std	Y+3, r22	; 0x03
	  if(curr_temp >= max_temp )
    2304:	29 81       	ldd	r18, Y+1	; 0x01
    2306:	3a 81       	ldd	r19, Y+2	; 0x02
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	28 17       	cp	r18, r24
    230e:	39 07       	cpc	r19, r25
    2310:	44 f0       	brlt	.+16     	; 0x2322 <Temp_warning+0x32>
	  {
		  PORTD |=(1<<1); //led on
    2312:	a2 e3       	ldi	r26, 0x32	; 50
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e2 e3       	ldi	r30, 0x32	; 50
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	82 60       	ori	r24, 0x02	; 2
    231e:	8c 93       	st	X, r24
    2320:	10 c0       	rjmp	.+32     	; 0x2342 <Temp_warning+0x52>
	  }
	  else if ( PIND & (1<<1) )
    2322:	e0 e3       	ldi	r30, 0x30	; 48
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	82 70       	andi	r24, 0x02	; 2
    232e:	90 70       	andi	r25, 0x00	; 0
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	39 f0       	breq	.+14     	; 0x2342 <Temp_warning+0x52>
	  {
		  PORTD &= ~(1<<1); //led off
    2334:	a2 e3       	ldi	r26, 0x32	; 50
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e2 e3       	ldi	r30, 0x32	; 50
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8d 7f       	andi	r24, 0xFD	; 253
    2340:	8c 93       	st	X, r24
	  }
  }
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <Button_Led_initialize>:
static int curr_temp = 255; //just for help , 255 is init value
static int last_temp = 255; //just for help , 255 is init value
//static unsigned char air_condition[2] = {' '};
uint8_t get_temp();
void Button_Led_initialize()
{	DDRD  |= (1<<0); //wrong password LED
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	a1 e3       	ldi	r26, 0x31	; 49
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e1 e3       	ldi	r30, 0x31	; 49
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	8c 93       	st	X, r24
	DDRD  |= (1<<6); //PIR LED
    2366:	a1 e3       	ldi	r26, 0x31	; 49
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e1 e3       	ldi	r30, 0x31	; 49
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	80 64       	ori	r24, 0x40	; 64
    2372:	8c 93       	st	X, r24
	DDRD  |= (1<<2); //KEYBAD interrupt
    2374:	a1 e3       	ldi	r26, 0x31	; 49
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e1 e3       	ldi	r30, 0x31	; 49
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	8c 93       	st	X, r24
	DDRA  |= (1<<2); //right password LED
    2382:	aa e3       	ldi	r26, 0x3A	; 58
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ea e3       	ldi	r30, 0x3A	; 58
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	84 60       	ori	r24, 0x04	; 4
    238e:	8c 93       	st	X, r24
	MCUCR |= (1 << ISC01);
    2390:	a5 e5       	ldi	r26, 0x55	; 85
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e5 e5       	ldi	r30, 0x55	; 85
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	82 60       	ori	r24, 0x02	; 2
    239c:	8c 93       	st	X, r24
	GICR  |= (1 << INT0);
    239e:	ab e5       	ldi	r26, 0x5B	; 91
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	eb e5       	ldi	r30, 0x5B	; 91
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 64       	ori	r24, 0x40	; 64
    23aa:	8c 93       	st	X, r24
}
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <enter_the_door>:

void enter_the_door()	//first time password enter
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
	PORTD |=  (1<<2);
    23ba:	a2 e3       	ldi	r26, 0x32	; 50
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e2 e3       	ldi	r30, 0x32	; 50
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	84 60       	ori	r24, 0x04	; 4
    23c6:	8c 93       	st	X, r24
	PORTD &= ~(1<<2);
    23c8:	a2 e3       	ldi	r26, 0x32	; 50
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e2 e3       	ldi	r30, 0x32	; 50
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8b 7f       	andi	r24, 0xFB	; 251
    23d4:	8c 93       	st	X, r24
}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <main>:

int main(void)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	6d 97       	sbiw	r28, 0x1d	; 29
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
	//KeyPad_init();
	LCD_initialize();
    23f0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_initialize>
	PIR_initialize();
    23f4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <PIR_initialize>
	Temp_initialize();
    23f8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Temp_initialize>
	buzzer_initialize();
    23fc:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <buzzer_initialize>
	Button_Led_initialize();
    2400:	0e 94 a8 11 	call	0x2350	; 0x2350 <Button_Led_initialize>
	sei();
    2404:	78 94       	sei
	uint8_t requierd_temp=28;
    2406:	8c e1       	ldi	r24, 0x1C	; 28
    2408:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_display_text("Welcome Home , ",700);
    240a:	89 e7       	ldi	r24, 0x79	; 121
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	6f e2       	ldi	r22, 0x2F	; 47
    2414:	74 e4       	ldi	r23, 0x44	; 68
    2416:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a8 e4       	ldi	r26, 0x48	; 72
    2420:	b3 e4       	ldi	r27, 0x43	; 67
    2422:	89 8f       	std	Y+25, r24	; 0x19
    2424:	9a 8f       	std	Y+26, r25	; 0x1a
    2426:	ab 8f       	std	Y+27, r26	; 0x1b
    2428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a ef       	ldi	r20, 0xFA	; 250
    2438:	54 e4       	ldi	r21, 0x44	; 68
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 8b       	std	Y+21, r24	; 0x15
    2444:	9e 8b       	std	Y+22, r25	; 0x16
    2446:	af 8b       	std	Y+23, r26	; 0x17
    2448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <main+0x90>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <main+0x10e>
	else if (__tmp > 65535)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <main+0xf0>
    24ae:	88 ec       	ldi	r24, 0xC8	; 200
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	89 89       	ldd	r24, Y+17	; 0x11
    24b8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <main+0xde>
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <main+0xd2>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <main+0x11a>
    24fa:	98 8b       	std	Y+16, r25	; 0x10
    24fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	LCD_set_Cursor(1,0);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
	LCD_display_text("Mr. abdelrhman",700);
    2506:	89 e8       	ldi	r24, 0x89	; 137
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	6f e2       	ldi	r22, 0x2F	; 47
    2510:	74 e4       	ldi	r23, 0x44	; 68
    2512:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>

	enter_the_door(); //first time password enter
    2516:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <enter_the_door>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	aa ef       	ldi	r26, 0xFA	; 250
    2520:	b3 e4       	ldi	r27, 0x43	; 67
    2522:	8b 87       	std	Y+11, r24	; 0x0b
    2524:	9c 87       	std	Y+12, r25	; 0x0c
    2526:	ad 87       	std	Y+13, r26	; 0x0d
    2528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a ef       	ldi	r20, 0xFA	; 250
    2538:	54 e4       	ldi	r21, 0x44	; 68
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8f 83       	std	Y+7, r24	; 0x07
    2544:	98 87       	std	Y+8, r25	; 0x08
    2546:	a9 87       	std	Y+9, r26	; 0x09
    2548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254a:	6f 81       	ldd	r22, Y+7	; 0x07
    254c:	78 85       	ldd	r23, Y+8	; 0x08
    254e:	89 85       	ldd	r24, Y+9	; 0x09
    2550:	9a 85       	ldd	r25, Y+10	; 0x0a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <main+0x190>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <main+0x20e>
	else if (__tmp > 65535)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6b 85       	ldd	r22, Y+11	; 0x0b
    2586:	7c 85       	ldd	r23, Y+12	; 0x0c
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <main+0x1f0>
    25ae:	88 ec       	ldi	r24, 0xC8	; 200
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <main+0x1de>
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <main+0x1d2>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	9a 81       	ldd	r25, Y+2	; 0x02
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <main+0x21a>
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);


	while (1)
	  	{
			PIR_DETECT_MOTION(); //led on if detect motion
    25fe:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <PIR_DETECT_MOTION>
			last_temp = curr_temp;
    2602:	80 91 fd 01 	lds	r24, 0x01FD
    2606:	90 91 fe 01 	lds	r25, 0x01FE
    260a:	90 93 00 02 	sts	0x0200, r25
    260e:	80 93 ff 01 	sts	0x01FF, r24
			curr_temp = Temp_GetInput();
    2612:	0e 94 60 10 	call	0x20c0	; 0x20c0 <Temp_GetInput>
    2616:	90 93 fe 01 	sts	0x01FE, r25
    261a:	80 93 fd 01 	sts	0x01FD, r24
//			if(Get_Key_Pressed()=='D')
//			{
//				requierd_temp=get_temp();
//				LCD_clear();
//			}
			Temp_warning(curr_temp ,(int)requierd_temp);//led on if the curr_temp lager than 30
    261e:	40 91 fd 01 	lds	r20, 0x01FD
    2622:	50 91 fe 01 	lds	r21, 0x01FE
    2626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	ca 01       	movw	r24, r20
    262e:	b9 01       	movw	r22, r18
    2630:	0e 94 78 11 	call	0x22f0	; 0x22f0 <Temp_warning>
			if(last_temp == 255 || (curr_temp-last_temp) )
    2634:	80 91 ff 01 	lds	r24, 0x01FF
    2638:	90 91 00 02 	lds	r25, 0x0200
    263c:	8f 3f       	cpi	r24, 0xFF	; 255
    263e:	91 05       	cpc	r25, r1
    2640:	59 f0       	breq	.+22     	; 0x2658 <main+0x27c>
    2642:	20 91 fd 01 	lds	r18, 0x01FD
    2646:	30 91 fe 01 	lds	r19, 0x01FE
    264a:	80 91 ff 01 	lds	r24, 0x01FF
    264e:	90 91 00 02 	lds	r25, 0x0200
    2652:	28 17       	cp	r18, r24
    2654:	39 07       	cpc	r19, r25
    2656:	99 f2       	breq	.-90     	; 0x25fe <main+0x222>
			{ //if it is first time to print or if the temp changes
				Temp_display(curr_temp);
    2658:	80 91 fd 01 	lds	r24, 0x01FD
    265c:	90 91 fe 01 	lds	r25, 0x01FE
    2660:	0e 94 24 11 	call	0x2248	; 0x2248 <Temp_display>
    2664:	cc cf       	rjmp	.-104    	; 0x25fe <main+0x222>

00002666 <__vector_1>:

	  	}
 }

ISR(INT0_vect)
{
    2666:	1f 92       	push	r1
    2668:	0f 92       	push	r0
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	0f 92       	push	r0
    266e:	11 24       	eor	r1, r1
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	2f 93       	push	r18
    2676:	3f 93       	push	r19
    2678:	4f 93       	push	r20
    267a:	5f 93       	push	r21
    267c:	6f 93       	push	r22
    267e:	7f 93       	push	r23
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	ce 54       	subi	r28, 0x4E	; 78
    2696:	d0 40       	sbci	r29, 0x00	; 0
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	fe 01       	movw	r30, r28
    269e:	ed 5b       	subi	r30, 0xBD	; 189
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	aa ef       	ldi	r26, 0xFA	; 250
    26a8:	b3 e4       	ldi	r27, 0x43	; 67
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	a2 83       	std	Z+2, r26	; 0x02
    26b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b2:	8e 01       	movw	r16, r28
    26b4:	01 5c       	subi	r16, 0xC1	; 193
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	ed 5b       	subi	r30, 0xBD	; 189
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a ef       	ldi	r20, 0xFA	; 250
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	f8 01       	movw	r30, r16
    26d8:	80 83       	st	Z, r24
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	a2 83       	std	Z+2, r26	; 0x02
    26de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e0:	fe 01       	movw	r30, r28
    26e2:	ff 96       	adiw	r30, 0x3f	; 63
    26e4:	60 81       	ld	r22, Z
    26e6:	71 81       	ldd	r23, Z+1	; 0x01
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <__vector_1+0xa0>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9e af       	std	Y+62, r25	; 0x3e
    2702:	8d af       	std	Y+61, r24	; 0x3d
    2704:	46 c0       	rjmp	.+140    	; 0x2792 <__vector_1+0x12c>
	else if (__tmp > 65535)
    2706:	fe 01       	movw	r30, r28
    2708:	ff 96       	adiw	r30, 0x3f	; 63
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	64 f5       	brge	.+88     	; 0x277a <__vector_1+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2722:	fe 01       	movw	r30, r28
    2724:	ed 5b       	subi	r30, 0xBD	; 189
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e2       	ldi	r20, 0x20	; 32
    2736:	51 e4       	ldi	r21, 0x41	; 65
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	9e af       	std	Y+62, r25	; 0x3e
    274e:	8d af       	std	Y+61, r24	; 0x3d
    2750:	0f c0       	rjmp	.+30     	; 0x2770 <__vector_1+0x10a>
    2752:	88 ec       	ldi	r24, 0xC8	; 200
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c af       	std	Y+60, r25	; 0x3c
    2758:	8b af       	std	Y+59, r24	; 0x3b
    275a:	8b ad       	ldd	r24, Y+59	; 0x3b
    275c:	9c ad       	ldd	r25, Y+60	; 0x3c
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <__vector_1+0xf8>
    2762:	9c af       	std	Y+60, r25	; 0x3c
    2764:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2766:	8d ad       	ldd	r24, Y+61	; 0x3d
    2768:	9e ad       	ldd	r25, Y+62	; 0x3e
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	9e af       	std	Y+62, r25	; 0x3e
    276e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2770:	8d ad       	ldd	r24, Y+61	; 0x3d
    2772:	9e ad       	ldd	r25, Y+62	; 0x3e
    2774:	00 97       	sbiw	r24, 0x00	; 0
    2776:	69 f7       	brne	.-38     	; 0x2752 <__vector_1+0xec>
    2778:	16 c0       	rjmp	.+44     	; 0x27a6 <__vector_1+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277a:	fe 01       	movw	r30, r28
    277c:	ff 96       	adiw	r30, 0x3f	; 63
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e af       	std	Y+62, r25	; 0x3e
    2790:	8d af       	std	Y+61, r24	; 0x3d
    2792:	8d ad       	ldd	r24, Y+61	; 0x3d
    2794:	9e ad       	ldd	r25, Y+62	; 0x3e
    2796:	9a af       	std	Y+58, r25	; 0x3a
    2798:	89 af       	std	Y+57, r24	; 0x39
    279a:	89 ad       	ldd	r24, Y+57	; 0x39
    279c:	9a ad       	ldd	r25, Y+58	; 0x3a
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <__vector_1+0x138>
    27a2:	9a af       	std	Y+58, r25	; 0x3a
    27a4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	unsigned int  counter = 0;
    27a6:	fe 01       	movw	r30, r28
    27a8:	e7 5b       	subi	r30, 0xB7	; 183
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	11 82       	std	Z+1, r1	; 0x01
    27ae:	10 82       	st	Z, r1
	unsigned char entered_password[4]={' '};
    27b0:	fe 01       	movw	r30, r28
    27b2:	e5 5b       	subi	r30, 0xB5	; 181
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	10 82       	st	Z, r1
    27b8:	11 82       	std	Z+1, r1	; 0x01
    27ba:	12 82       	std	Z+2, r1	; 0x02
    27bc:	13 82       	std	Z+3, r1	; 0x03
    27be:	fe 01       	movw	r30, r28
    27c0:	e5 5b       	subi	r30, 0xB5	; 181
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 e2       	ldi	r24, 0x20	; 32
    27c6:	80 83       	st	Z, r24

	while( 1 )
	{
		LCD_clear();
    27c8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_clear>
		LCD_display_text("enter password:",700);
    27cc:	88 e9       	ldi	r24, 0x98	; 152
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	6f e2       	ldi	r22, 0x2F	; 47
    27d6:	74 e4       	ldi	r23, 0x44	; 68
    27d8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
		LCD_set_Cursor(1,0);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
		for(int i =0 ; i<4 ; i++)
    27e4:	fe 01       	movw	r30, r28
    27e6:	e9 5b       	subi	r30, 0xB9	; 185
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	11 82       	std	Z+1, r1	; 0x01
    27ec:	10 82       	st	Z, r1
    27ee:	9b c0       	rjmp	.+310    	; 0x2926 <__vector_1+0x2c0>
		{
			entered_password[i]=Get_Key_pressed();
    27f0:	fe 01       	movw	r30, r28
    27f2:	e9 5b       	subi	r30, 0xB9	; 185
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	00 81       	ld	r16, Z
    27f8:	11 81       	ldd	r17, Z+1	; 0x01
    27fa:	0e 94 a8 07 	call	0xf50	; 0xf50 <Get_Key_pressed>
    27fe:	28 2f       	mov	r18, r24
    2800:	ce 01       	movw	r24, r28
    2802:	85 5b       	subi	r24, 0xB5	; 181
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	fc 01       	movw	r30, r24
    2808:	e0 0f       	add	r30, r16
    280a:	f1 1f       	adc	r31, r17
    280c:	20 83       	st	Z, r18
			LCD_display_char(entered_password[i]); //##change it to '*'
    280e:	fe 01       	movw	r30, r28
    2810:	e9 5b       	subi	r30, 0xB9	; 185
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	20 81       	ld	r18, Z
    2816:	31 81       	ldd	r19, Z+1	; 0x01
    2818:	ce 01       	movw	r24, r28
    281a:	85 5b       	subi	r24, 0xB5	; 181
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	fc 01       	movw	r30, r24
    2820:	e2 0f       	add	r30, r18
    2822:	f3 1f       	adc	r31, r19
    2824:	80 81       	ld	r24, Z
    2826:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_display_char>
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	aa ef       	ldi	r26, 0xFA	; 250
    2830:	b3 e4       	ldi	r27, 0x43	; 67
    2832:	8d ab       	std	Y+53, r24	; 0x35
    2834:	9e ab       	std	Y+54, r25	; 0x36
    2836:	af ab       	std	Y+55, r26	; 0x37
    2838:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6d a9       	ldd	r22, Y+53	; 0x35
    283c:	7e a9       	ldd	r23, Y+54	; 0x36
    283e:	8f a9       	ldd	r24, Y+55	; 0x37
    2840:	98 ad       	ldd	r25, Y+56	; 0x38
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	89 ab       	std	Y+49, r24	; 0x31
    2854:	9a ab       	std	Y+50, r25	; 0x32
    2856:	ab ab       	std	Y+51, r26	; 0x33
    2858:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    285a:	69 a9       	ldd	r22, Y+49	; 0x31
    285c:	7a a9       	ldd	r23, Y+50	; 0x32
    285e:	8b a9       	ldd	r24, Y+51	; 0x33
    2860:	9c a9       	ldd	r25, Y+52	; 0x34
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <__vector_1+0x216>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	98 ab       	std	Y+48, r25	; 0x30
    2878:	8f a7       	std	Y+47, r24	; 0x2f
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <__vector_1+0x294>
	else if (__tmp > 65535)
    287c:	69 a9       	ldd	r22, Y+49	; 0x31
    287e:	7a a9       	ldd	r23, Y+50	; 0x32
    2880:	8b a9       	ldd	r24, Y+51	; 0x33
    2882:	9c a9       	ldd	r25, Y+52	; 0x34
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <__vector_1+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6d a9       	ldd	r22, Y+53	; 0x35
    2896:	7e a9       	ldd	r23, Y+54	; 0x36
    2898:	8f a9       	ldd	r24, Y+55	; 0x37
    289a:	98 ad       	ldd	r25, Y+56	; 0x38
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <__vector_1+0x276>
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e a7       	std	Y+46, r25	; 0x2e
    28c4:	8d a7       	std	Y+45, r24	; 0x2d
    28c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <__vector_1+0x264>
    28ce:	9e a7       	std	Y+46, r25	; 0x2e
    28d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d4:	98 a9       	ldd	r25, Y+48	; 0x30
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	98 ab       	std	Y+48, r25	; 0x30
    28da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <__vector_1+0x258>
    28e4:	14 c0       	rjmp	.+40     	; 0x290e <__vector_1+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	69 a9       	ldd	r22, Y+49	; 0x31
    28e8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ea:	8b a9       	ldd	r24, Y+51	; 0x33
    28ec:	9c a9       	ldd	r25, Y+52	; 0x34
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	98 ab       	std	Y+48, r25	; 0x30
    28f8:	8f a7       	std	Y+47, r24	; 0x2f
    28fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fc:	98 a9       	ldd	r25, Y+48	; 0x30
    28fe:	9c a7       	std	Y+44, r25	; 0x2c
    2900:	8b a7       	std	Y+43, r24	; 0x2b
    2902:	8b a5       	ldd	r24, Y+43	; 0x2b
    2904:	9c a5       	ldd	r25, Y+44	; 0x2c
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <__vector_1+0x2a0>
    290a:	9c a7       	std	Y+44, r25	; 0x2c
    290c:	8b a7       	std	Y+43, r24	; 0x2b
	while( 1 )
	{
		LCD_clear();
		LCD_display_text("enter password:",700);
		LCD_set_Cursor(1,0);
		for(int i =0 ; i<4 ; i++)
    290e:	de 01       	movw	r26, r28
    2910:	a9 5b       	subi	r26, 0xB9	; 185
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	e9 5b       	subi	r30, 0xB9	; 185
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	9c 93       	st	X, r25
    2924:	8e 93       	st	-X, r24
    2926:	fe 01       	movw	r30, r28
    2928:	e9 5b       	subi	r30, 0xB9	; 185
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	84 30       	cpi	r24, 0x04	; 4
    2932:	91 05       	cpc	r25, r1
    2934:	0c f4       	brge	.+2      	; 0x2938 <__vector_1+0x2d2>
    2936:	5c cf       	rjmp	.-328    	; 0x27f0 <__vector_1+0x18a>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	aa ef       	ldi	r26, 0xFA	; 250
    293e:	b3 e4       	ldi	r27, 0x43	; 67
    2940:	8f a3       	std	Y+39, r24	; 0x27
    2942:	98 a7       	std	Y+40, r25	; 0x28
    2944:	a9 a7       	std	Y+41, r26	; 0x29
    2946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6f a1       	ldd	r22, Y+39	; 0x27
    294a:	78 a5       	ldd	r23, Y+40	; 0x28
    294c:	89 a5       	ldd	r24, Y+41	; 0x29
    294e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a ef       	ldi	r20, 0xFA	; 250
    2956:	54 e4       	ldi	r21, 0x44	; 68
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8b a3       	std	Y+35, r24	; 0x23
    2962:	9c a3       	std	Y+36, r25	; 0x24
    2964:	ad a3       	std	Y+37, r26	; 0x25
    2966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2968:	6b a1       	ldd	r22, Y+35	; 0x23
    296a:	7c a1       	ldd	r23, Y+36	; 0x24
    296c:	8d a1       	ldd	r24, Y+37	; 0x25
    296e:	9e a1       	ldd	r25, Y+38	; 0x26
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <__vector_1+0x324>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9a a3       	std	Y+34, r25	; 0x22
    2986:	89 a3       	std	Y+33, r24	; 0x21
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <__vector_1+0x3a2>
	else if (__tmp > 65535)
    298a:	6b a1       	ldd	r22, Y+35	; 0x23
    298c:	7c a1       	ldd	r23, Y+36	; 0x24
    298e:	8d a1       	ldd	r24, Y+37	; 0x25
    2990:	9e a1       	ldd	r25, Y+38	; 0x26
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <__vector_1+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6f a1       	ldd	r22, Y+39	; 0x27
    29a4:	78 a5       	ldd	r23, Y+40	; 0x28
    29a6:	89 a5       	ldd	r24, Y+41	; 0x29
    29a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9a a3       	std	Y+34, r25	; 0x22
    29c8:	89 a3       	std	Y+33, r24	; 0x21
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <__vector_1+0x384>
    29cc:	88 ec       	ldi	r24, 0xC8	; 200
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	98 a3       	std	Y+32, r25	; 0x20
    29d2:	8f 8f       	std	Y+31, r24	; 0x1f
    29d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d6:	98 a1       	ldd	r25, Y+32	; 0x20
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <__vector_1+0x372>
    29dc:	98 a3       	std	Y+32, r25	; 0x20
    29de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	9a a3       	std	Y+34, r25	; 0x22
    29e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	89 a1       	ldd	r24, Y+33	; 0x21
    29ec:	9a a1       	ldd	r25, Y+34	; 0x22
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <__vector_1+0x366>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <__vector_1+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	6b a1       	ldd	r22, Y+35	; 0x23
    29f6:	7c a1       	ldd	r23, Y+36	; 0x24
    29f8:	8d a1       	ldd	r24, Y+37	; 0x25
    29fa:	9e a1       	ldd	r25, Y+38	; 0x26
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9a a3       	std	Y+34, r25	; 0x22
    2a06:	89 a3       	std	Y+33, r24	; 0x21
    2a08:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <__vector_1+0x3ae>
    2a18:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1a:	8d 8f       	std	Y+29, r24	; 0x1d
			entered_password[i]=Get_Key_pressed();
			LCD_display_char(entered_password[i]); //##change it to '*'
			_delay_ms(500);
		}
		_delay_ms(500);
		if( (memcmp(entered_password, password, sizeof(entered_password)) != 0) )
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	85 5b       	subi	r24, 0xB5	; 181
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	29 ef       	ldi	r18, 0xF9	; 249
    2a24:	31 e0       	ldi	r19, 0x01	; 1
    2a26:	b9 01       	movw	r22, r18
    2a28:	44 e0       	ldi	r20, 0x04	; 4
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <memcmp>
    2a30:	00 97       	sbiw	r24, 0x00	; 0
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <__vector_1+0x3d0>
    2a34:	e0 c0       	rjmp	.+448    	; 0x2bf6 <__vector_1+0x590>
		{
			counter++;
    2a36:	de 01       	movw	r26, r28
    2a38:	a7 5b       	subi	r26, 0xB7	; 183
    2a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e7 5b       	subi	r30, 0xB7	; 183
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	8d 93       	st	X+, r24
    2a4a:	9c 93       	st	X, r25
			PORTD|=(1<<0); 	//led on
    2a4c:	a2 e3       	ldi	r26, 0x32	; 50
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e2 e3       	ldi	r30, 0x32	; 50
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	81 60       	ori	r24, 0x01	; 1
    2a58:	8c 93       	st	X, r24
			LCD_clear();
    2a5a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_clear>
			LCD_display_text("Wrong password",700);
    2a5e:	88 ea       	ldi	r24, 0xA8	; 168
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	6f e2       	ldi	r22, 0x2F	; 47
    2a68:	74 e4       	ldi	r23, 0x44	; 68
    2a6a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
			LCD_set_Cursor(1,0);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
			LCD_display_text("You have ",700);
    2a76:	87 eb       	ldi	r24, 0xB7	; 183
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	6f e2       	ldi	r22, 0x2F	; 47
    2a80:	74 e4       	ldi	r23, 0x44	; 68
    2a82:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
			LCD_display_char( 3-counter+'0' );
    2a86:	fe 01       	movw	r30, r28
    2a88:	e7 5b       	subi	r30, 0xB7	; 183
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	90 81       	ld	r25, Z
    2a8e:	83 e3       	ldi	r24, 0x33	; 51
    2a90:	89 1b       	sub	r24, r25
    2a92:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_display_char>
			LCD_display_text(" left",700);
    2a96:	81 ec       	ldi	r24, 0xC1	; 193
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	6f e2       	ldi	r22, 0x2F	; 47
    2aa0:	74 e4       	ldi	r23, 0x44	; 68
    2aa2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	aa ef       	ldi	r26, 0xFA	; 250
    2aac:	b3 e4       	ldi	r27, 0x43	; 67
    2aae:	89 8f       	std	Y+25, r24	; 0x19
    2ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a ef       	ldi	r20, 0xFA	; 250
    2ac4:	54 e4       	ldi	r21, 0x44	; 68
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	8d 8b       	std	Y+21, r24	; 0x15
    2ad0:	9e 8b       	std	Y+22, r25	; 0x16
    2ad2:	af 8b       	std	Y+23, r26	; 0x17
    2ad4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aea:	88 23       	and	r24, r24
    2aec:	2c f4       	brge	.+10     	; 0x2af8 <__vector_1+0x492>
		__ticks = 1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
    2af6:	3f c0       	rjmp	.+126    	; 0x2b76 <__vector_1+0x510>
	else if (__tmp > 65535)
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	4c f5       	brge	.+82     	; 0x2b62 <__vector_1+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b10:	69 8d       	ldd	r22, Y+25	; 0x19
    2b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
    2b38:	0f c0       	rjmp	.+30     	; 0x2b58 <__vector_1+0x4f2>
    2b3a:	88 ec       	ldi	r24, 0xC8	; 200
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9a 8b       	std	Y+18, r25	; 0x12
    2b40:	89 8b       	std	Y+17, r24	; 0x11
    2b42:	89 89       	ldd	r24, Y+17	; 0x11
    2b44:	9a 89       	ldd	r25, Y+18	; 0x12
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <__vector_1+0x4e0>
    2b4a:	9a 8b       	std	Y+18, r25	; 0x12
    2b4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b50:	9c 89       	ldd	r25, Y+20	; 0x14
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	69 f7       	brne	.-38     	; 0x2b3a <__vector_1+0x4d4>
    2b60:	14 c0       	rjmp	.+40     	; 0x2b8a <__vector_1+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b62:	6d 89       	ldd	r22, Y+21	; 0x15
    2b64:	7e 89       	ldd	r23, Y+22	; 0x16
    2b66:	8f 89       	ldd	r24, Y+23	; 0x17
    2b68:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	98 8b       	std	Y+16, r25	; 0x10
    2b7c:	8f 87       	std	Y+15, r24	; 0x0f
    2b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b80:	98 89       	ldd	r25, Y+16	; 0x10
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <__vector_1+0x51c>
    2b86:	98 8b       	std	Y+16, r25	; 0x10
    2b88:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			PORTD&=~(1<<0); //led off
    2b8a:	a2 e3       	ldi	r26, 0x32	; 50
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e2 e3       	ldi	r30, 0x32	; 50
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8e 7f       	andi	r24, 0xFE	; 254
    2b96:	8c 93       	st	X, r24

			if(counter == 3)
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e7 5b       	subi	r30, 0xB7	; 183
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <__vector_1+0x544>
    2ba8:	0f ce       	rjmp	.-994    	; 0x27c8 <__vector_1+0x162>
			{
				LCD_clear();
    2baa:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_clear>
				LCD_set_Cursor(1,3);
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	63 e0       	ldi	r22, 0x03	; 3
    2bb2:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
				LCD_display_text("a Thief !! ",700);
    2bb6:	87 ec       	ldi	r24, 0xC7	; 199
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	6f e2       	ldi	r22, 0x2F	; 47
    2bc0:	74 e4       	ldi	r23, 0x44	; 68
    2bc2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
				LCD_set_Cursor(1,2);
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	0e 94 83 0b 	call	0x1706	; 0x1706 <LCD_set_Cursor>
				LCD_display_text("  go away !! ",700);
    2bce:	83 ed       	ldi	r24, 0xD3	; 211
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	6f e2       	ldi	r22, 0x2F	; 47
    2bd8:	74 e4       	ldi	r23, 0x44	; 68
    2bda:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <LCD_display_text>
				buzzer_turn_on(10000); //time in ms
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	70 e4       	ldi	r23, 0x40	; 64
    2be2:	8c e1       	ldi	r24, 0x1C	; 28
    2be4:	96 e4       	ldi	r25, 0x46	; 70
    2be6:	0e 94 11 07 	call	0xe22	; 0xe22 <buzzer_turn_on>
				counter = 0; //reset counter
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5b       	subi	r30, 0xB7	; 183
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	11 82       	std	Z+1, r1	; 0x01
    2bf2:	10 82       	st	Z, r1
    2bf4:	8f c0       	rjmp	.+286    	; 0x2d14 <__vector_1+0x6ae>
			}
		}

		else
		{
			LCD_clear();
    2bf6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_clear>
			PORTA  |=  (1<<2);	//led on
    2bfa:	ab e3       	ldi	r26, 0x3B	; 59
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	eb e3       	ldi	r30, 0x3B	; 59
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	84 60       	ori	r24, 0x04	; 4
    2c06:	8c 93       	st	X, r24
			opendoor();
    2c08:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <opendoor>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	aa ef       	ldi	r26, 0xFA	; 250
    2c12:	b3 e4       	ldi	r27, 0x43	; 67
    2c14:	8b 87       	std	Y+11, r24	; 0x0b
    2c16:	9c 87       	std	Y+12, r25	; 0x0c
    2c18:	ad 87       	std	Y+13, r26	; 0x0d
    2c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	4a ef       	ldi	r20, 0xFA	; 250
    2c2a:	54 e4       	ldi	r21, 0x44	; 68
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	8f 83       	std	Y+7, r24	; 0x07
    2c36:	98 87       	std	Y+8, r25	; 0x08
    2c38:	a9 87       	std	Y+9, r26	; 0x09
    2c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e8       	ldi	r20, 0x80	; 128
    2c4a:	5f e3       	ldi	r21, 0x3F	; 63
    2c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c50:	88 23       	and	r24, r24
    2c52:	2c f4       	brge	.+10     	; 0x2c5e <__vector_1+0x5f8>
		__ticks = 1;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
    2c5c:	3f c0       	rjmp	.+126    	; 0x2cdc <__vector_1+0x676>
	else if (__tmp > 65535)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	4c f5       	brge	.+82     	; 0x2cc8 <__vector_1+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e2       	ldi	r20, 0x20	; 32
    2c84:	51 e4       	ldi	r21, 0x41	; 65
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <__vector_1+0x658>
    2ca0:	88 ec       	ldi	r24, 0xC8	; 200
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9c 83       	std	Y+4, r25	; 0x04
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <__vector_1+0x646>
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	69 f7       	brne	.-38     	; 0x2ca0 <__vector_1+0x63a>
    2cc6:	14 c0       	rjmp	.+40     	; 0x2cf0 <__vector_1+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cca:	78 85       	ldd	r23, Y+8	; 0x08
    2ccc:	89 85       	ldd	r24, Y+9	; 0x09
    2cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	9a 83       	std	Y+2, r25	; 0x02
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <__vector_1+0x682>
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			PORTA  &= ~(1<<2);  //led off
    2cf0:	ab e3       	ldi	r26, 0x3B	; 59
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	eb e3       	ldi	r30, 0x3B	; 59
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8b 7f       	andi	r24, 0xFB	; 251
    2cfc:	8c 93       	st	X, r24
			counter = 0;		//reset counter
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e7 5b       	subi	r30, 0xB7	; 183
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	11 82       	std	Z+1, r1	; 0x01
    2d06:	10 82       	st	Z, r1
			last_temp = 255;	//to print temp when return to main
    2d08:	8f ef       	ldi	r24, 0xFF	; 255
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	90 93 00 02 	sts	0x0200, r25
    2d10:	80 93 ff 01 	sts	0x01FF, r24
			break;
		}
	}
}
    2d14:	c2 5b       	subi	r28, 0xB2	; 178
    2d16:	df 4f       	sbci	r29, 0xFF	; 255
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	ff 91       	pop	r31
    2d22:	ef 91       	pop	r30
    2d24:	bf 91       	pop	r27
    2d26:	af 91       	pop	r26
    2d28:	9f 91       	pop	r25
    2d2a:	8f 91       	pop	r24
    2d2c:	7f 91       	pop	r23
    2d2e:	6f 91       	pop	r22
    2d30:	5f 91       	pop	r21
    2d32:	4f 91       	pop	r20
    2d34:	3f 91       	pop	r19
    2d36:	2f 91       	pop	r18
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	0f 90       	pop	r0
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	0f 90       	pop	r0
    2d42:	1f 90       	pop	r1
    2d44:	18 95       	reti

00002d46 <opendoor>:
 */

#include "motor.h"

void opendoor()
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	6c 97       	sbiw	r28, 0x1c	; 28
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    2d5a:	a1 e3       	ldi	r26, 0x31	; 49
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e1 e3       	ldi	r30, 0x31	; 49
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	80 62       	ori	r24, 0x20	; 32
    2d66:	8c 93       	st	X, r24
	TCNT1 = 0;			/* Set timer1 count zero */
    2d68:	ec e4       	ldi	r30, 0x4C	; 76
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	11 82       	std	Z+1, r1	; 0x01
    2d6e:	10 82       	st	Z, r1
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
    2d70:	e6 e4       	ldi	r30, 0x46	; 70
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	83 ec       	ldi	r24, 0xC3	; 195
    2d76:	99 e0       	ldi	r25, 0x09	; 9
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
    2d7c:	ef e4       	ldi	r30, 0x4F	; 79
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	82 e8       	ldi	r24, 0x82	; 130
    2d82:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    2d84:	ee e4       	ldi	r30, 0x4E	; 78
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	8b e1       	ldi	r24, 0x1B	; 27
    2d8a:	80 83       	st	Z, r24
	OCR1A = 65;			/* Set servo shaft at -90° position */
    2d8c:	ea e4       	ldi	r30, 0x4A	; 74
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	81 e4       	ldi	r24, 0x41	; 65
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e6       	ldi	r25, 0x60	; 96
    2d9c:	aa e6       	ldi	r26, 0x6A	; 106
    2d9e:	b6 e4       	ldi	r27, 0x46	; 70
    2da0:	89 8f       	std	Y+25, r24	; 0x19
    2da2:	9a 8f       	std	Y+26, r25	; 0x1a
    2da4:	ab 8f       	std	Y+27, r26	; 0x1b
    2da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da8:	69 8d       	ldd	r22, Y+25	; 0x19
    2daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	4a e7       	ldi	r20, 0x7A	; 122
    2db6:	53 e4       	ldi	r21, 0x43	; 67
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	8d 8b       	std	Y+21, r24	; 0x15
    2dc2:	9e 8b       	std	Y+22, r25	; 0x16
    2dc4:	af 8b       	std	Y+23, r26	; 0x17
    2dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dca:	7e 89       	ldd	r23, Y+22	; 0x16
    2dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dce:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	2c f4       	brge	.+10     	; 0x2dea <opendoor+0xa4>
		__ticks = 1;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
    2de8:	3f c0       	rjmp	.+126    	; 0x2e68 <opendoor+0x122>
	else if (__tmp > 65535)
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	3f ef       	ldi	r19, 0xFF	; 255
    2df6:	4f e7       	ldi	r20, 0x7F	; 127
    2df8:	57 e4       	ldi	r21, 0x47	; 71
    2dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dfe:	18 16       	cp	r1, r24
    2e00:	4c f5       	brge	.+82     	; 0x2e54 <opendoor+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e02:	69 8d       	ldd	r22, Y+25	; 0x19
    2e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	bc 01       	movw	r22, r24
    2e1c:	cd 01       	movw	r24, r26
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9c 8b       	std	Y+20, r25	; 0x14
    2e28:	8b 8b       	std	Y+19, r24	; 0x13
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <opendoor+0x104>
    2e2c:	89 e1       	ldi	r24, 0x19	; 25
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9a 8b       	std	Y+18, r25	; 0x12
    2e32:	89 8b       	std	Y+17, r24	; 0x11
    2e34:	89 89       	ldd	r24, Y+17	; 0x11
    2e36:	9a 89       	ldd	r25, Y+18	; 0x12
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <opendoor+0xf2>
    2e3c:	9a 8b       	std	Y+18, r25	; 0x12
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e40:	8b 89       	ldd	r24, Y+19	; 0x13
    2e42:	9c 89       	ldd	r25, Y+20	; 0x14
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	69 f7       	brne	.-38     	; 0x2e2c <opendoor+0xe6>
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <opendoor+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e54:	6d 89       	ldd	r22, Y+21	; 0x15
    2e56:	7e 89       	ldd	r23, Y+22	; 0x16
    2e58:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	98 8b       	std	Y+16, r25	; 0x10
    2e6e:	8f 87       	std	Y+15, r24	; 0x0f
    2e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e72:	98 89       	ldd	r25, Y+16	; 0x10
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <opendoor+0x12e>
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15000);		//rember to chane it
	OCR1A = 175;		/* Set servo shaft at 0° position */
    2e7c:	ea e4       	ldi	r30, 0x4A	; 74
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	8f ea       	ldi	r24, 0xAF	; 175
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 ec       	ldi	r25, 0xC0	; 192
    2e8c:	aa ed       	ldi	r26, 0xDA	; 218
    2e8e:	b5 e4       	ldi	r27, 0x45	; 69
    2e90:	8b 87       	std	Y+11, r24	; 0x0b
    2e92:	9c 87       	std	Y+12, r25	; 0x0c
    2e94:	ad 87       	std	Y+13, r26	; 0x0d
    2e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a e7       	ldi	r20, 0x7A	; 122
    2ea6:	53 e4       	ldi	r21, 0x43	; 67
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8f 83       	std	Y+7, r24	; 0x07
    2eb2:	98 87       	std	Y+8, r25	; 0x08
    2eb4:	a9 87       	std	Y+9, r26	; 0x09
    2eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eba:	78 85       	ldd	r23, Y+8	; 0x08
    2ebc:	89 85       	ldd	r24, Y+9	; 0x09
    2ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <opendoor+0x194>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9e 83       	std	Y+6, r25	; 0x06
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <opendoor+0x212>
	else if (__tmp > 65535)
    2eda:	6f 81       	ldd	r22, Y+7	; 0x07
    2edc:	78 85       	ldd	r23, Y+8	; 0x08
    2ede:	89 85       	ldd	r24, Y+9	; 0x09
    2ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <opendoor+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e 83       	std	Y+6, r25	; 0x06
    2f18:	8d 83       	std	Y+5, r24	; 0x05
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <opendoor+0x1f4>
    2f1c:	89 e1       	ldi	r24, 0x19	; 25
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <opendoor+0x1e2>
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <opendoor+0x1d6>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <opendoor+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	6f 81       	ldd	r22, Y+7	; 0x07
    2f46:	78 85       	ldd	r23, Y+8	; 0x08
    2f48:	89 85       	ldd	r24, Y+9	; 0x09
    2f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <opendoor+0x21e>
    2f68:	9a 83       	std	Y+2, r25	; 0x02
    2f6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(7000);

}
    2f6c:	6c 96       	adiw	r28, 0x1c	; 28
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <__prologue_saves__>:
    2f7e:	2f 92       	push	r2
    2f80:	3f 92       	push	r3
    2f82:	4f 92       	push	r4
    2f84:	5f 92       	push	r5
    2f86:	6f 92       	push	r6
    2f88:	7f 92       	push	r7
    2f8a:	8f 92       	push	r8
    2f8c:	9f 92       	push	r9
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	ca 1b       	sub	r28, r26
    2fa8:	db 0b       	sbc	r29, r27
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	09 94       	ijmp

00002fb6 <__epilogue_restores__>:
    2fb6:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb8:	39 88       	ldd	r3, Y+17	; 0x11
    2fba:	48 88       	ldd	r4, Y+16	; 0x10
    2fbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc8:	b9 84       	ldd	r11, Y+9	; 0x09
    2fca:	c8 84       	ldd	r12, Y+8	; 0x08
    2fcc:	df 80       	ldd	r13, Y+7	; 0x07
    2fce:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd0:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd2:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd4:	1b 81       	ldd	r17, Y+3	; 0x03
    2fd6:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd8:	b9 81       	ldd	r27, Y+1	; 0x01
    2fda:	ce 0f       	add	r28, r30
    2fdc:	d1 1d       	adc	r29, r1
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	ed 01       	movw	r28, r26
    2fea:	08 95       	ret

00002fec <memcmp>:
    2fec:	fb 01       	movw	r30, r22
    2fee:	dc 01       	movw	r26, r24
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <memcmp+0xe>
    2ff2:	8d 91       	ld	r24, X+
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	80 19       	sub	r24, r0
    2ff8:	21 f4       	brne	.+8      	; 0x3002 <memcmp+0x16>
    2ffa:	41 50       	subi	r20, 0x01	; 1
    2ffc:	50 40       	sbci	r21, 0x00	; 0
    2ffe:	c8 f7       	brcc	.-14     	; 0x2ff2 <memcmp+0x6>
    3000:	88 1b       	sub	r24, r24
    3002:	99 0b       	sbc	r25, r25
    3004:	08 95       	ret

00003006 <sprintf>:
    3006:	ae e0       	ldi	r26, 0x0E	; 14
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e0       	ldi	r30, 0x09	; 9
    300c:	f8 e1       	ldi	r31, 0x18	; 24
    300e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x1c>
    3012:	0d 89       	ldd	r16, Y+21	; 0x15
    3014:	1e 89       	ldd	r17, Y+22	; 0x16
    3016:	86 e0       	ldi	r24, 0x06	; 6
    3018:	8c 83       	std	Y+4, r24	; 0x04
    301a:	1a 83       	std	Y+2, r17	; 0x02
    301c:	09 83       	std	Y+1, r16	; 0x01
    301e:	8f ef       	ldi	r24, 0xFF	; 255
    3020:	9f e7       	ldi	r25, 0x7F	; 127
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	9e 01       	movw	r18, r28
    3028:	27 5e       	subi	r18, 0xE7	; 231
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	ce 01       	movw	r24, r28
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	6f 89       	ldd	r22, Y+23	; 0x17
    3032:	78 8d       	ldd	r23, Y+24	; 0x18
    3034:	a9 01       	movw	r20, r18
    3036:	0e 94 27 18 	call	0x304e	; 0x304e <vfprintf>
    303a:	2f 81       	ldd	r18, Y+7	; 0x07
    303c:	38 85       	ldd	r19, Y+8	; 0x08
    303e:	02 0f       	add	r16, r18
    3040:	13 1f       	adc	r17, r19
    3042:	f8 01       	movw	r30, r16
    3044:	10 82       	st	Z, r1
    3046:	2e 96       	adiw	r28, 0x0e	; 14
    3048:	e4 e0       	ldi	r30, 0x04	; 4
    304a:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x1c>

0000304e <vfprintf>:
    304e:	ab e0       	ldi	r26, 0x0B	; 11
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	ed e2       	ldi	r30, 0x2D	; 45
    3054:	f8 e1       	ldi	r31, 0x18	; 24
    3056:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__prologue_saves__>
    305a:	3c 01       	movw	r6, r24
    305c:	2b 01       	movw	r4, r22
    305e:	5a 01       	movw	r10, r20
    3060:	fc 01       	movw	r30, r24
    3062:	17 82       	std	Z+7, r1	; 0x07
    3064:	16 82       	std	Z+6, r1	; 0x06
    3066:	83 81       	ldd	r24, Z+3	; 0x03
    3068:	81 fd       	sbrc	r24, 1
    306a:	03 c0       	rjmp	.+6      	; 0x3072 <vfprintf+0x24>
    306c:	6f ef       	ldi	r22, 0xFF	; 255
    306e:	7f ef       	ldi	r23, 0xFF	; 255
    3070:	c6 c1       	rjmp	.+908    	; 0x33fe <vfprintf+0x3b0>
    3072:	9a e0       	ldi	r25, 0x0A	; 10
    3074:	89 2e       	mov	r8, r25
    3076:	1e 01       	movw	r2, r28
    3078:	08 94       	sec
    307a:	21 1c       	adc	r2, r1
    307c:	31 1c       	adc	r3, r1
    307e:	f3 01       	movw	r30, r6
    3080:	23 81       	ldd	r18, Z+3	; 0x03
    3082:	f2 01       	movw	r30, r4
    3084:	23 fd       	sbrc	r18, 3
    3086:	85 91       	lpm	r24, Z+
    3088:	23 ff       	sbrs	r18, 3
    308a:	81 91       	ld	r24, Z+
    308c:	2f 01       	movw	r4, r30
    308e:	88 23       	and	r24, r24
    3090:	09 f4       	brne	.+2      	; 0x3094 <vfprintf+0x46>
    3092:	b2 c1       	rjmp	.+868    	; 0x33f8 <vfprintf+0x3aa>
    3094:	85 32       	cpi	r24, 0x25	; 37
    3096:	39 f4       	brne	.+14     	; 0x30a6 <vfprintf+0x58>
    3098:	23 fd       	sbrc	r18, 3
    309a:	85 91       	lpm	r24, Z+
    309c:	23 ff       	sbrs	r18, 3
    309e:	81 91       	ld	r24, Z+
    30a0:	2f 01       	movw	r4, r30
    30a2:	85 32       	cpi	r24, 0x25	; 37
    30a4:	29 f4       	brne	.+10     	; 0x30b0 <vfprintf+0x62>
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	b3 01       	movw	r22, r6
    30aa:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    30ae:	e7 cf       	rjmp	.-50     	; 0x307e <vfprintf+0x30>
    30b0:	98 2f       	mov	r25, r24
    30b2:	ff 24       	eor	r15, r15
    30b4:	ee 24       	eor	r14, r14
    30b6:	99 24       	eor	r9, r9
    30b8:	ff e1       	ldi	r31, 0x1F	; 31
    30ba:	ff 15       	cp	r31, r15
    30bc:	d0 f0       	brcs	.+52     	; 0x30f2 <vfprintf+0xa4>
    30be:	9b 32       	cpi	r25, 0x2B	; 43
    30c0:	69 f0       	breq	.+26     	; 0x30dc <vfprintf+0x8e>
    30c2:	9c 32       	cpi	r25, 0x2C	; 44
    30c4:	28 f4       	brcc	.+10     	; 0x30d0 <vfprintf+0x82>
    30c6:	90 32       	cpi	r25, 0x20	; 32
    30c8:	59 f0       	breq	.+22     	; 0x30e0 <vfprintf+0x92>
    30ca:	93 32       	cpi	r25, 0x23	; 35
    30cc:	91 f4       	brne	.+36     	; 0x30f2 <vfprintf+0xa4>
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <vfprintf+0x9e>
    30d0:	9d 32       	cpi	r25, 0x2D	; 45
    30d2:	49 f0       	breq	.+18     	; 0x30e6 <vfprintf+0x98>
    30d4:	90 33       	cpi	r25, 0x30	; 48
    30d6:	69 f4       	brne	.+26     	; 0x30f2 <vfprintf+0xa4>
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	24 c0       	rjmp	.+72     	; 0x3124 <vfprintf+0xd6>
    30dc:	52 e0       	ldi	r21, 0x02	; 2
    30de:	f5 2a       	or	r15, r21
    30e0:	84 e0       	ldi	r24, 0x04	; 4
    30e2:	f8 2a       	or	r15, r24
    30e4:	28 c0       	rjmp	.+80     	; 0x3136 <vfprintf+0xe8>
    30e6:	98 e0       	ldi	r25, 0x08	; 8
    30e8:	f9 2a       	or	r15, r25
    30ea:	25 c0       	rjmp	.+74     	; 0x3136 <vfprintf+0xe8>
    30ec:	e0 e1       	ldi	r30, 0x10	; 16
    30ee:	fe 2a       	or	r15, r30
    30f0:	22 c0       	rjmp	.+68     	; 0x3136 <vfprintf+0xe8>
    30f2:	f7 fc       	sbrc	r15, 7
    30f4:	29 c0       	rjmp	.+82     	; 0x3148 <vfprintf+0xfa>
    30f6:	89 2f       	mov	r24, r25
    30f8:	80 53       	subi	r24, 0x30	; 48
    30fa:	8a 30       	cpi	r24, 0x0A	; 10
    30fc:	70 f4       	brcc	.+28     	; 0x311a <vfprintf+0xcc>
    30fe:	f6 fe       	sbrs	r15, 6
    3100:	05 c0       	rjmp	.+10     	; 0x310c <vfprintf+0xbe>
    3102:	98 9c       	mul	r9, r8
    3104:	90 2c       	mov	r9, r0
    3106:	11 24       	eor	r1, r1
    3108:	98 0e       	add	r9, r24
    310a:	15 c0       	rjmp	.+42     	; 0x3136 <vfprintf+0xe8>
    310c:	e8 9c       	mul	r14, r8
    310e:	e0 2c       	mov	r14, r0
    3110:	11 24       	eor	r1, r1
    3112:	e8 0e       	add	r14, r24
    3114:	f0 e2       	ldi	r31, 0x20	; 32
    3116:	ff 2a       	or	r15, r31
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <vfprintf+0xe8>
    311a:	9e 32       	cpi	r25, 0x2E	; 46
    311c:	29 f4       	brne	.+10     	; 0x3128 <vfprintf+0xda>
    311e:	f6 fc       	sbrc	r15, 6
    3120:	6b c1       	rjmp	.+726    	; 0x33f8 <vfprintf+0x3aa>
    3122:	40 e4       	ldi	r20, 0x40	; 64
    3124:	f4 2a       	or	r15, r20
    3126:	07 c0       	rjmp	.+14     	; 0x3136 <vfprintf+0xe8>
    3128:	9c 36       	cpi	r25, 0x6C	; 108
    312a:	19 f4       	brne	.+6      	; 0x3132 <vfprintf+0xe4>
    312c:	50 e8       	ldi	r21, 0x80	; 128
    312e:	f5 2a       	or	r15, r21
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <vfprintf+0xe8>
    3132:	98 36       	cpi	r25, 0x68	; 104
    3134:	49 f4       	brne	.+18     	; 0x3148 <vfprintf+0xfa>
    3136:	f2 01       	movw	r30, r4
    3138:	23 fd       	sbrc	r18, 3
    313a:	95 91       	lpm	r25, Z+
    313c:	23 ff       	sbrs	r18, 3
    313e:	91 91       	ld	r25, Z+
    3140:	2f 01       	movw	r4, r30
    3142:	99 23       	and	r25, r25
    3144:	09 f0       	breq	.+2      	; 0x3148 <vfprintf+0xfa>
    3146:	b8 cf       	rjmp	.-144    	; 0x30b8 <vfprintf+0x6a>
    3148:	89 2f       	mov	r24, r25
    314a:	85 54       	subi	r24, 0x45	; 69
    314c:	83 30       	cpi	r24, 0x03	; 3
    314e:	18 f0       	brcs	.+6      	; 0x3156 <vfprintf+0x108>
    3150:	80 52       	subi	r24, 0x20	; 32
    3152:	83 30       	cpi	r24, 0x03	; 3
    3154:	38 f4       	brcc	.+14     	; 0x3164 <vfprintf+0x116>
    3156:	44 e0       	ldi	r20, 0x04	; 4
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	a4 0e       	add	r10, r20
    315c:	b5 1e       	adc	r11, r21
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	59 83       	std	Y+1, r21	; 0x01
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <vfprintf+0x134>
    3164:	93 36       	cpi	r25, 0x63	; 99
    3166:	31 f0       	breq	.+12     	; 0x3174 <vfprintf+0x126>
    3168:	93 37       	cpi	r25, 0x73	; 115
    316a:	79 f0       	breq	.+30     	; 0x318a <vfprintf+0x13c>
    316c:	93 35       	cpi	r25, 0x53	; 83
    316e:	09 f0       	breq	.+2      	; 0x3172 <vfprintf+0x124>
    3170:	56 c0       	rjmp	.+172    	; 0x321e <vfprintf+0x1d0>
    3172:	20 c0       	rjmp	.+64     	; 0x31b4 <vfprintf+0x166>
    3174:	f5 01       	movw	r30, r10
    3176:	80 81       	ld	r24, Z
    3178:	89 83       	std	Y+1, r24	; 0x01
    317a:	42 e0       	ldi	r20, 0x02	; 2
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	a4 0e       	add	r10, r20
    3180:	b5 1e       	adc	r11, r21
    3182:	61 01       	movw	r12, r2
    3184:	01 e0       	ldi	r16, 0x01	; 1
    3186:	10 e0       	ldi	r17, 0x00	; 0
    3188:	12 c0       	rjmp	.+36     	; 0x31ae <vfprintf+0x160>
    318a:	f5 01       	movw	r30, r10
    318c:	c0 80       	ld	r12, Z
    318e:	d1 80       	ldd	r13, Z+1	; 0x01
    3190:	f6 fc       	sbrc	r15, 6
    3192:	03 c0       	rjmp	.+6      	; 0x319a <vfprintf+0x14c>
    3194:	6f ef       	ldi	r22, 0xFF	; 255
    3196:	7f ef       	ldi	r23, 0xFF	; 255
    3198:	02 c0       	rjmp	.+4      	; 0x319e <vfprintf+0x150>
    319a:	69 2d       	mov	r22, r9
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	42 e0       	ldi	r20, 0x02	; 2
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	a4 0e       	add	r10, r20
    31a4:	b5 1e       	adc	r11, r21
    31a6:	c6 01       	movw	r24, r12
    31a8:	0e 94 0f 1a 	call	0x341e	; 0x341e <strnlen>
    31ac:	8c 01       	movw	r16, r24
    31ae:	5f e7       	ldi	r21, 0x7F	; 127
    31b0:	f5 22       	and	r15, r21
    31b2:	14 c0       	rjmp	.+40     	; 0x31dc <vfprintf+0x18e>
    31b4:	f5 01       	movw	r30, r10
    31b6:	c0 80       	ld	r12, Z
    31b8:	d1 80       	ldd	r13, Z+1	; 0x01
    31ba:	f6 fc       	sbrc	r15, 6
    31bc:	03 c0       	rjmp	.+6      	; 0x31c4 <vfprintf+0x176>
    31be:	6f ef       	ldi	r22, 0xFF	; 255
    31c0:	7f ef       	ldi	r23, 0xFF	; 255
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0x17a>
    31c4:	69 2d       	mov	r22, r9
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	42 e0       	ldi	r20, 0x02	; 2
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	a4 0e       	add	r10, r20
    31ce:	b5 1e       	adc	r11, r21
    31d0:	c6 01       	movw	r24, r12
    31d2:	0e 94 04 1a 	call	0x3408	; 0x3408 <strnlen_P>
    31d6:	8c 01       	movw	r16, r24
    31d8:	50 e8       	ldi	r21, 0x80	; 128
    31da:	f5 2a       	or	r15, r21
    31dc:	f3 fe       	sbrs	r15, 3
    31de:	07 c0       	rjmp	.+14     	; 0x31ee <vfprintf+0x1a0>
    31e0:	1a c0       	rjmp	.+52     	; 0x3216 <vfprintf+0x1c8>
    31e2:	80 e2       	ldi	r24, 0x20	; 32
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	b3 01       	movw	r22, r6
    31e8:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    31ec:	ea 94       	dec	r14
    31ee:	8e 2d       	mov	r24, r14
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	08 17       	cp	r16, r24
    31f4:	19 07       	cpc	r17, r25
    31f6:	a8 f3       	brcs	.-22     	; 0x31e2 <vfprintf+0x194>
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <vfprintf+0x1c8>
    31fa:	f6 01       	movw	r30, r12
    31fc:	f7 fc       	sbrc	r15, 7
    31fe:	85 91       	lpm	r24, Z+
    3200:	f7 fe       	sbrs	r15, 7
    3202:	81 91       	ld	r24, Z+
    3204:	6f 01       	movw	r12, r30
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	b3 01       	movw	r22, r6
    320a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    320e:	e1 10       	cpse	r14, r1
    3210:	ea 94       	dec	r14
    3212:	01 50       	subi	r16, 0x01	; 1
    3214:	10 40       	sbci	r17, 0x00	; 0
    3216:	01 15       	cp	r16, r1
    3218:	11 05       	cpc	r17, r1
    321a:	79 f7       	brne	.-34     	; 0x31fa <vfprintf+0x1ac>
    321c:	ea c0       	rjmp	.+468    	; 0x33f2 <vfprintf+0x3a4>
    321e:	94 36       	cpi	r25, 0x64	; 100
    3220:	11 f0       	breq	.+4      	; 0x3226 <vfprintf+0x1d8>
    3222:	99 36       	cpi	r25, 0x69	; 105
    3224:	69 f5       	brne	.+90     	; 0x3280 <vfprintf+0x232>
    3226:	f7 fe       	sbrs	r15, 7
    3228:	08 c0       	rjmp	.+16     	; 0x323a <vfprintf+0x1ec>
    322a:	f5 01       	movw	r30, r10
    322c:	20 81       	ld	r18, Z
    322e:	31 81       	ldd	r19, Z+1	; 0x01
    3230:	42 81       	ldd	r20, Z+2	; 0x02
    3232:	53 81       	ldd	r21, Z+3	; 0x03
    3234:	84 e0       	ldi	r24, 0x04	; 4
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	0a c0       	rjmp	.+20     	; 0x324e <vfprintf+0x200>
    323a:	f5 01       	movw	r30, r10
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	9c 01       	movw	r18, r24
    3242:	44 27       	eor	r20, r20
    3244:	37 fd       	sbrc	r19, 7
    3246:	40 95       	com	r20
    3248:	54 2f       	mov	r21, r20
    324a:	82 e0       	ldi	r24, 0x02	; 2
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	a8 0e       	add	r10, r24
    3250:	b9 1e       	adc	r11, r25
    3252:	9f e6       	ldi	r25, 0x6F	; 111
    3254:	f9 22       	and	r15, r25
    3256:	57 ff       	sbrs	r21, 7
    3258:	09 c0       	rjmp	.+18     	; 0x326c <vfprintf+0x21e>
    325a:	50 95       	com	r21
    325c:	40 95       	com	r20
    325e:	30 95       	com	r19
    3260:	21 95       	neg	r18
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	4f 4f       	sbci	r20, 0xFF	; 255
    3266:	5f 4f       	sbci	r21, 0xFF	; 255
    3268:	e0 e8       	ldi	r30, 0x80	; 128
    326a:	fe 2a       	or	r15, r30
    326c:	ca 01       	movw	r24, r20
    326e:	b9 01       	movw	r22, r18
    3270:	a1 01       	movw	r20, r2
    3272:	2a e0       	ldi	r18, 0x0A	; 10
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	0e 94 46 1a 	call	0x348c	; 0x348c <__ultoa_invert>
    327a:	d8 2e       	mov	r13, r24
    327c:	d2 18       	sub	r13, r2
    327e:	40 c0       	rjmp	.+128    	; 0x3300 <vfprintf+0x2b2>
    3280:	95 37       	cpi	r25, 0x75	; 117
    3282:	29 f4       	brne	.+10     	; 0x328e <vfprintf+0x240>
    3284:	1f 2d       	mov	r17, r15
    3286:	1f 7e       	andi	r17, 0xEF	; 239
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	1d c0       	rjmp	.+58     	; 0x32c8 <vfprintf+0x27a>
    328e:	1f 2d       	mov	r17, r15
    3290:	19 7f       	andi	r17, 0xF9	; 249
    3292:	9f 36       	cpi	r25, 0x6F	; 111
    3294:	61 f0       	breq	.+24     	; 0x32ae <vfprintf+0x260>
    3296:	90 37       	cpi	r25, 0x70	; 112
    3298:	20 f4       	brcc	.+8      	; 0x32a2 <vfprintf+0x254>
    329a:	98 35       	cpi	r25, 0x58	; 88
    329c:	09 f0       	breq	.+2      	; 0x32a0 <vfprintf+0x252>
    329e:	ac c0       	rjmp	.+344    	; 0x33f8 <vfprintf+0x3aa>
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <vfprintf+0x272>
    32a2:	90 37       	cpi	r25, 0x70	; 112
    32a4:	39 f0       	breq	.+14     	; 0x32b4 <vfprintf+0x266>
    32a6:	98 37       	cpi	r25, 0x78	; 120
    32a8:	09 f0       	breq	.+2      	; 0x32ac <vfprintf+0x25e>
    32aa:	a6 c0       	rjmp	.+332    	; 0x33f8 <vfprintf+0x3aa>
    32ac:	04 c0       	rjmp	.+8      	; 0x32b6 <vfprintf+0x268>
    32ae:	28 e0       	ldi	r18, 0x08	; 8
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	0a c0       	rjmp	.+20     	; 0x32c8 <vfprintf+0x27a>
    32b4:	10 61       	ori	r17, 0x10	; 16
    32b6:	14 fd       	sbrc	r17, 4
    32b8:	14 60       	ori	r17, 0x04	; 4
    32ba:	20 e1       	ldi	r18, 0x10	; 16
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	04 c0       	rjmp	.+8      	; 0x32c8 <vfprintf+0x27a>
    32c0:	14 fd       	sbrc	r17, 4
    32c2:	16 60       	ori	r17, 0x06	; 6
    32c4:	20 e1       	ldi	r18, 0x10	; 16
    32c6:	32 e0       	ldi	r19, 0x02	; 2
    32c8:	17 ff       	sbrs	r17, 7
    32ca:	08 c0       	rjmp	.+16     	; 0x32dc <vfprintf+0x28e>
    32cc:	f5 01       	movw	r30, r10
    32ce:	60 81       	ld	r22, Z
    32d0:	71 81       	ldd	r23, Z+1	; 0x01
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	93 81       	ldd	r25, Z+3	; 0x03
    32d6:	44 e0       	ldi	r20, 0x04	; 4
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	08 c0       	rjmp	.+16     	; 0x32ec <vfprintf+0x29e>
    32dc:	f5 01       	movw	r30, r10
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	bc 01       	movw	r22, r24
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	42 e0       	ldi	r20, 0x02	; 2
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	a4 0e       	add	r10, r20
    32ee:	b5 1e       	adc	r11, r21
    32f0:	a1 01       	movw	r20, r2
    32f2:	0e 94 46 1a 	call	0x348c	; 0x348c <__ultoa_invert>
    32f6:	d8 2e       	mov	r13, r24
    32f8:	d2 18       	sub	r13, r2
    32fa:	8f e7       	ldi	r24, 0x7F	; 127
    32fc:	f8 2e       	mov	r15, r24
    32fe:	f1 22       	and	r15, r17
    3300:	f6 fe       	sbrs	r15, 6
    3302:	0b c0       	rjmp	.+22     	; 0x331a <vfprintf+0x2cc>
    3304:	5e ef       	ldi	r21, 0xFE	; 254
    3306:	f5 22       	and	r15, r21
    3308:	d9 14       	cp	r13, r9
    330a:	38 f4       	brcc	.+14     	; 0x331a <vfprintf+0x2cc>
    330c:	f4 fe       	sbrs	r15, 4
    330e:	07 c0       	rjmp	.+14     	; 0x331e <vfprintf+0x2d0>
    3310:	f2 fc       	sbrc	r15, 2
    3312:	05 c0       	rjmp	.+10     	; 0x331e <vfprintf+0x2d0>
    3314:	8f ee       	ldi	r24, 0xEF	; 239
    3316:	f8 22       	and	r15, r24
    3318:	02 c0       	rjmp	.+4      	; 0x331e <vfprintf+0x2d0>
    331a:	1d 2d       	mov	r17, r13
    331c:	01 c0       	rjmp	.+2      	; 0x3320 <vfprintf+0x2d2>
    331e:	19 2d       	mov	r17, r9
    3320:	f4 fe       	sbrs	r15, 4
    3322:	0d c0       	rjmp	.+26     	; 0x333e <vfprintf+0x2f0>
    3324:	fe 01       	movw	r30, r28
    3326:	ed 0d       	add	r30, r13
    3328:	f1 1d       	adc	r31, r1
    332a:	80 81       	ld	r24, Z
    332c:	80 33       	cpi	r24, 0x30	; 48
    332e:	19 f4       	brne	.+6      	; 0x3336 <vfprintf+0x2e8>
    3330:	99 ee       	ldi	r25, 0xE9	; 233
    3332:	f9 22       	and	r15, r25
    3334:	08 c0       	rjmp	.+16     	; 0x3346 <vfprintf+0x2f8>
    3336:	1f 5f       	subi	r17, 0xFF	; 255
    3338:	f2 fe       	sbrs	r15, 2
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <vfprintf+0x2f8>
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <vfprintf+0x2f6>
    333e:	8f 2d       	mov	r24, r15
    3340:	86 78       	andi	r24, 0x86	; 134
    3342:	09 f0       	breq	.+2      	; 0x3346 <vfprintf+0x2f8>
    3344:	1f 5f       	subi	r17, 0xFF	; 255
    3346:	0f 2d       	mov	r16, r15
    3348:	f3 fc       	sbrc	r15, 3
    334a:	14 c0       	rjmp	.+40     	; 0x3374 <vfprintf+0x326>
    334c:	f0 fe       	sbrs	r15, 0
    334e:	0f c0       	rjmp	.+30     	; 0x336e <vfprintf+0x320>
    3350:	1e 15       	cp	r17, r14
    3352:	10 f0       	brcs	.+4      	; 0x3358 <vfprintf+0x30a>
    3354:	9d 2c       	mov	r9, r13
    3356:	0b c0       	rjmp	.+22     	; 0x336e <vfprintf+0x320>
    3358:	9d 2c       	mov	r9, r13
    335a:	9e 0c       	add	r9, r14
    335c:	91 1a       	sub	r9, r17
    335e:	1e 2d       	mov	r17, r14
    3360:	06 c0       	rjmp	.+12     	; 0x336e <vfprintf+0x320>
    3362:	80 e2       	ldi	r24, 0x20	; 32
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	b3 01       	movw	r22, r6
    3368:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    336c:	1f 5f       	subi	r17, 0xFF	; 255
    336e:	1e 15       	cp	r17, r14
    3370:	c0 f3       	brcs	.-16     	; 0x3362 <vfprintf+0x314>
    3372:	04 c0       	rjmp	.+8      	; 0x337c <vfprintf+0x32e>
    3374:	1e 15       	cp	r17, r14
    3376:	10 f4       	brcc	.+4      	; 0x337c <vfprintf+0x32e>
    3378:	e1 1a       	sub	r14, r17
    337a:	01 c0       	rjmp	.+2      	; 0x337e <vfprintf+0x330>
    337c:	ee 24       	eor	r14, r14
    337e:	04 ff       	sbrs	r16, 4
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <vfprintf+0x352>
    3382:	80 e3       	ldi	r24, 0x30	; 48
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	b3 01       	movw	r22, r6
    3388:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    338c:	02 ff       	sbrs	r16, 2
    338e:	1d c0       	rjmp	.+58     	; 0x33ca <vfprintf+0x37c>
    3390:	01 fd       	sbrc	r16, 1
    3392:	03 c0       	rjmp	.+6      	; 0x339a <vfprintf+0x34c>
    3394:	88 e7       	ldi	r24, 0x78	; 120
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e c0       	rjmp	.+28     	; 0x33b6 <vfprintf+0x368>
    339a:	88 e5       	ldi	r24, 0x58	; 88
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0b c0       	rjmp	.+22     	; 0x33b6 <vfprintf+0x368>
    33a0:	80 2f       	mov	r24, r16
    33a2:	86 78       	andi	r24, 0x86	; 134
    33a4:	91 f0       	breq	.+36     	; 0x33ca <vfprintf+0x37c>
    33a6:	01 ff       	sbrs	r16, 1
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <vfprintf+0x360>
    33aa:	8b e2       	ldi	r24, 0x2B	; 43
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <vfprintf+0x362>
    33ae:	80 e2       	ldi	r24, 0x20	; 32
    33b0:	f7 fc       	sbrc	r15, 7
    33b2:	8d e2       	ldi	r24, 0x2D	; 45
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	b3 01       	movw	r22, r6
    33b8:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33bc:	06 c0       	rjmp	.+12     	; 0x33ca <vfprintf+0x37c>
    33be:	80 e3       	ldi	r24, 0x30	; 48
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	b3 01       	movw	r22, r6
    33c4:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33c8:	9a 94       	dec	r9
    33ca:	d9 14       	cp	r13, r9
    33cc:	c0 f3       	brcs	.-16     	; 0x33be <vfprintf+0x370>
    33ce:	da 94       	dec	r13
    33d0:	f1 01       	movw	r30, r2
    33d2:	ed 0d       	add	r30, r13
    33d4:	f1 1d       	adc	r31, r1
    33d6:	80 81       	ld	r24, Z
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	b3 01       	movw	r22, r6
    33dc:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33e0:	dd 20       	and	r13, r13
    33e2:	a9 f7       	brne	.-22     	; 0x33ce <vfprintf+0x380>
    33e4:	06 c0       	rjmp	.+12     	; 0x33f2 <vfprintf+0x3a4>
    33e6:	80 e2       	ldi	r24, 0x20	; 32
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	b3 01       	movw	r22, r6
    33ec:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33f0:	ea 94       	dec	r14
    33f2:	ee 20       	and	r14, r14
    33f4:	c1 f7       	brne	.-16     	; 0x33e6 <vfprintf+0x398>
    33f6:	43 ce       	rjmp	.-890    	; 0x307e <vfprintf+0x30>
    33f8:	f3 01       	movw	r30, r6
    33fa:	66 81       	ldd	r22, Z+6	; 0x06
    33fc:	77 81       	ldd	r23, Z+7	; 0x07
    33fe:	cb 01       	movw	r24, r22
    3400:	2b 96       	adiw	r28, 0x0b	; 11
    3402:	e2 e1       	ldi	r30, 0x12	; 18
    3404:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__epilogue_restores__>

00003408 <strnlen_P>:
    3408:	fc 01       	movw	r30, r24
    340a:	05 90       	lpm	r0, Z+
    340c:	61 50       	subi	r22, 0x01	; 1
    340e:	70 40       	sbci	r23, 0x00	; 0
    3410:	01 10       	cpse	r0, r1
    3412:	d8 f7       	brcc	.-10     	; 0x340a <strnlen_P+0x2>
    3414:	80 95       	com	r24
    3416:	90 95       	com	r25
    3418:	8e 0f       	add	r24, r30
    341a:	9f 1f       	adc	r25, r31
    341c:	08 95       	ret

0000341e <strnlen>:
    341e:	fc 01       	movw	r30, r24
    3420:	61 50       	subi	r22, 0x01	; 1
    3422:	70 40       	sbci	r23, 0x00	; 0
    3424:	01 90       	ld	r0, Z+
    3426:	01 10       	cpse	r0, r1
    3428:	d8 f7       	brcc	.-10     	; 0x3420 <strnlen+0x2>
    342a:	80 95       	com	r24
    342c:	90 95       	com	r25
    342e:	8e 0f       	add	r24, r30
    3430:	9f 1f       	adc	r25, r31
    3432:	08 95       	ret

00003434 <fputc>:
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	8c 01       	movw	r16, r24
    343e:	eb 01       	movw	r28, r22
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	81 ff       	sbrs	r24, 1
    3444:	1b c0       	rjmp	.+54     	; 0x347c <fputc+0x48>
    3446:	82 ff       	sbrs	r24, 2
    3448:	0d c0       	rjmp	.+26     	; 0x3464 <fputc+0x30>
    344a:	2e 81       	ldd	r18, Y+6	; 0x06
    344c:	3f 81       	ldd	r19, Y+7	; 0x07
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	9d 81       	ldd	r25, Y+5	; 0x05
    3452:	28 17       	cp	r18, r24
    3454:	39 07       	cpc	r19, r25
    3456:	64 f4       	brge	.+24     	; 0x3470 <fputc+0x3c>
    3458:	e8 81       	ld	r30, Y
    345a:	f9 81       	ldd	r31, Y+1	; 0x01
    345c:	01 93       	st	Z+, r16
    345e:	f9 83       	std	Y+1, r31	; 0x01
    3460:	e8 83       	st	Y, r30
    3462:	06 c0       	rjmp	.+12     	; 0x3470 <fputc+0x3c>
    3464:	e8 85       	ldd	r30, Y+8	; 0x08
    3466:	f9 85       	ldd	r31, Y+9	; 0x09
    3468:	80 2f       	mov	r24, r16
    346a:	09 95       	icall
    346c:	89 2b       	or	r24, r25
    346e:	31 f4       	brne	.+12     	; 0x347c <fputc+0x48>
    3470:	8e 81       	ldd	r24, Y+6	; 0x06
    3472:	9f 81       	ldd	r25, Y+7	; 0x07
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	9f 83       	std	Y+7, r25	; 0x07
    3478:	8e 83       	std	Y+6, r24	; 0x06
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <fputc+0x4c>
    347c:	0f ef       	ldi	r16, 0xFF	; 255
    347e:	1f ef       	ldi	r17, 0xFF	; 255
    3480:	c8 01       	movw	r24, r16
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	08 95       	ret

0000348c <__ultoa_invert>:
    348c:	fa 01       	movw	r30, r20
    348e:	aa 27       	eor	r26, r26
    3490:	28 30       	cpi	r18, 0x08	; 8
    3492:	51 f1       	breq	.+84     	; 0x34e8 <__ultoa_invert+0x5c>
    3494:	20 31       	cpi	r18, 0x10	; 16
    3496:	81 f1       	breq	.+96     	; 0x34f8 <__ultoa_invert+0x6c>
    3498:	e8 94       	clt
    349a:	6f 93       	push	r22
    349c:	6e 7f       	andi	r22, 0xFE	; 254
    349e:	6e 5f       	subi	r22, 0xFE	; 254
    34a0:	7f 4f       	sbci	r23, 0xFF	; 255
    34a2:	8f 4f       	sbci	r24, 0xFF	; 255
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	af 4f       	sbci	r26, 0xFF	; 255
    34a8:	b1 e0       	ldi	r27, 0x01	; 1
    34aa:	3e d0       	rcall	.+124    	; 0x3528 <__ultoa_invert+0x9c>
    34ac:	b4 e0       	ldi	r27, 0x04	; 4
    34ae:	3c d0       	rcall	.+120    	; 0x3528 <__ultoa_invert+0x9c>
    34b0:	67 0f       	add	r22, r23
    34b2:	78 1f       	adc	r23, r24
    34b4:	89 1f       	adc	r24, r25
    34b6:	9a 1f       	adc	r25, r26
    34b8:	a1 1d       	adc	r26, r1
    34ba:	68 0f       	add	r22, r24
    34bc:	79 1f       	adc	r23, r25
    34be:	8a 1f       	adc	r24, r26
    34c0:	91 1d       	adc	r25, r1
    34c2:	a1 1d       	adc	r26, r1
    34c4:	6a 0f       	add	r22, r26
    34c6:	71 1d       	adc	r23, r1
    34c8:	81 1d       	adc	r24, r1
    34ca:	91 1d       	adc	r25, r1
    34cc:	a1 1d       	adc	r26, r1
    34ce:	20 d0       	rcall	.+64     	; 0x3510 <__ultoa_invert+0x84>
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <__ultoa_invert+0x48>
    34d2:	68 94       	set
    34d4:	3f 91       	pop	r19
    34d6:	2a e0       	ldi	r18, 0x0A	; 10
    34d8:	26 9f       	mul	r18, r22
    34da:	11 24       	eor	r1, r1
    34dc:	30 19       	sub	r19, r0
    34de:	30 5d       	subi	r19, 0xD0	; 208
    34e0:	31 93       	st	Z+, r19
    34e2:	de f6       	brtc	.-74     	; 0x349a <__ultoa_invert+0xe>
    34e4:	cf 01       	movw	r24, r30
    34e6:	08 95       	ret
    34e8:	46 2f       	mov	r20, r22
    34ea:	47 70       	andi	r20, 0x07	; 7
    34ec:	40 5d       	subi	r20, 0xD0	; 208
    34ee:	41 93       	st	Z+, r20
    34f0:	b3 e0       	ldi	r27, 0x03	; 3
    34f2:	0f d0       	rcall	.+30     	; 0x3512 <__ultoa_invert+0x86>
    34f4:	c9 f7       	brne	.-14     	; 0x34e8 <__ultoa_invert+0x5c>
    34f6:	f6 cf       	rjmp	.-20     	; 0x34e4 <__ultoa_invert+0x58>
    34f8:	46 2f       	mov	r20, r22
    34fa:	4f 70       	andi	r20, 0x0F	; 15
    34fc:	40 5d       	subi	r20, 0xD0	; 208
    34fe:	4a 33       	cpi	r20, 0x3A	; 58
    3500:	18 f0       	brcs	.+6      	; 0x3508 <__ultoa_invert+0x7c>
    3502:	49 5d       	subi	r20, 0xD9	; 217
    3504:	31 fd       	sbrc	r19, 1
    3506:	40 52       	subi	r20, 0x20	; 32
    3508:	41 93       	st	Z+, r20
    350a:	02 d0       	rcall	.+4      	; 0x3510 <__ultoa_invert+0x84>
    350c:	a9 f7       	brne	.-22     	; 0x34f8 <__ultoa_invert+0x6c>
    350e:	ea cf       	rjmp	.-44     	; 0x34e4 <__ultoa_invert+0x58>
    3510:	b4 e0       	ldi	r27, 0x04	; 4
    3512:	a6 95       	lsr	r26
    3514:	97 95       	ror	r25
    3516:	87 95       	ror	r24
    3518:	77 95       	ror	r23
    351a:	67 95       	ror	r22
    351c:	ba 95       	dec	r27
    351e:	c9 f7       	brne	.-14     	; 0x3512 <__ultoa_invert+0x86>
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	61 05       	cpc	r22, r1
    3524:	71 05       	cpc	r23, r1
    3526:	08 95       	ret
    3528:	9b 01       	movw	r18, r22
    352a:	ac 01       	movw	r20, r24
    352c:	0a 2e       	mov	r0, r26
    352e:	06 94       	lsr	r0
    3530:	57 95       	ror	r21
    3532:	47 95       	ror	r20
    3534:	37 95       	ror	r19
    3536:	27 95       	ror	r18
    3538:	ba 95       	dec	r27
    353a:	c9 f7       	brne	.-14     	; 0x352e <__ultoa_invert+0xa2>
    353c:	62 0f       	add	r22, r18
    353e:	73 1f       	adc	r23, r19
    3540:	84 1f       	adc	r24, r20
    3542:	95 1f       	adc	r25, r21
    3544:	a0 1d       	adc	r26, r0
    3546:	08 95       	ret

00003548 <_exit>:
    3548:	f8 94       	cli

0000354a <__stop_program>:
    354a:	ff cf       	rjmp	.-2      	; 0x354a <__stop_program>
